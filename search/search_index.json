{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. .md-content__button { display: none; }","title":"Home"},{"location":"index.html#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. .md-content__button { display: none; }","title":"Project layout"},{"location":"code.html","text":"Code tests Python C++ HTML and CSS JavaScript # Finally, I can present Python code on my website. def sum ( a , b ): return a + b def sub ( a , b ): return a - b def mul ( a , b ): return a * b def div ( a , b ): return a / b a = float ( input ( 'First: ' )) b = float ( input ( 'Second: ' )) op = input ( 'Operation (sum/sub/mul/div): ' ) if op == 'sum' : print ( f 'a + b = { sum ( a , b ) } ' ) elif op == 'sub' : print ( f 'a - b = { sub ( a , b ) } ' ) elif op == 'mul' : print ( f 'a * b = { mul ( a , b ) } ' ) elif op == 'div' : print ( f 'a / b = { div ( a , b ) } ' ) else : print ( 'Invalid Operation!' ) /* How about C++? */ private void index (){ MessageBox . Show ( \"hello world\" ); } // Or HTML and CSS (with a few extra long lines of code)? <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Battleship </ title > < style > body { background-color : black ; } div # board { position : relative ; width : 1024 px ; height : 863 px ; margin : auto ; background : url ( \"board.jpg\" ) no-repeat ; } div # messageArea { position : absolute ; top : 0 px ; left : 0 px ; color : rgb ( 83 , 175 , 19 ); } table { position : absolute ; left : 173 px ; top : 98 px ; border-spacing : 0 px ; } td { width : 94 px ; height : 94 px ; } form { position : absolute ; bottom : 0 px ; right : 0 px ; padding : 15 px ; background-color : rgb ( 83 , 175 , 19 ); } form input { background-color : rgb ( 152 , 207 , 113 ); border-color : rgb ( 83 , 175 , 19 ); font-size : 1 em ; } . hit { background : url ( \"ship.png\" ) no-repeat center center ; } . miss { background : url ( \"miss.png\" ) no-repeat center center ; } </ style > </ head > </ body > < div id = \"board\" > < div id = \"messageArea\" ></ div > < table > < tr > < td id = \"00\" ></ td >< td id = \"01\" ></ td >< td id = \"02\" ></ td >< td id = \"03\" ></ td >< td id = \"04\" ></ td >< td id = \"05\" ></ td >< td id = \"06\" ></ td > </ tr > < tr > < td id = \"10\" ></ td >< td id = \"11\" ></ td >< td id = \"12\" ></ td >< td id = \"13\" ></ td >< td id = \"14\" ></ td >< td id = \"15\" ></ td >< td id = \"16\" ></ td > </ tr > < tr > < td id = \"20\" ></ td >< td id = \"21\" ></ td >< td id = \"22\" ></ td >< td id = \"23\" ></ td >< td id = \"24\" ></ td >< td id = \"25\" ></ td >< td id = \"26\" ></ td > </ tr > < tr > < td id = \"30\" ></ td >< td id = \"31\" ></ td >< td id = \"32\" ></ td >< td id = \"33\" ></ td >< td id = \"34\" ></ td >< td id = \"35\" ></ td >< td id = \"36\" ></ td > </ tr > < tr > < td id = \"40\" ></ td >< td id = \"41\" ></ td >< td id = \"42\" ></ td >< td id = \"43\" ></ td >< td id = \"44\" ></ td >< td id = \"45\" ></ td >< td id = \"46\" ></ td > </ tr > < tr > < td id = \"50\" ></ td >< td id = \"51\" ></ td >< td id = \"52\" ></ td >< td id = \"53\" ></ td >< td id = \"54\" ></ td >< td id = \"55\" ></ td >< td id = \"56\" ></ td > </ tr > < tr > < td id = \"60\" ></ td >< td id = \"61\" ></ td >< td id = \"62\" ></ td >< td id = \"63\" ></ td >< td id = \"64\" ></ td >< td id = \"65\" ></ td >< td id = \"66\" ></ td > </ tr > </ table > < form > < input type = \"text\" id = \"guessInput\" placeholder = \"A0\" > < input type = \"button\" id = \"fireButton\" value = \"Fire!\" > </ form > </ div > < script src = \"battleship2.js\" ></ script > </ body > </ html > // Or JavaScript? var view = { displayMessage : function ( msg ) { var messageArea = document . getElementById ( \"messageArea\" ); messageArea . innerHTML = msg ; }, displayHit : function ( location ) { var cell = document . getElementById ( location ); cell . setAttribute ( \"class\" , \"hit\" ); }, displayMiss : function ( location ) { var cell = document . getElementById ( location ); cell . setAttribute ( \"class\" , \"miss\" ); } }; var model = { boardSize : 7 , numShips : 3 , shipLength : 3 , shipsSunk : 0 , ships : [{ locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }, { locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }, { locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }], fire : function ( guess ) { for ( var i = 0 ; i < this . numShips ; i ++ ) { var ship = this . ships [ i ]; var index = ship . locations . indexOf ( guess ); if ( index >= 0 ) { ship . hits [ index ] = \"hit\" ; view . displayHit ( guess ); view . displayMessage ( \"HIT!\" ); if ( this . isSunk ( ship )) { view . displayMessage ( \"You sank my battleship!\" ); this . shipsSunk ++ ; } return true ; } } view . displayMiss ( guess ); view . displayMessage ( \"You missed.\" ); return false ; }, isSunk : function ( ship ) { for ( var i = 0 ; i < this . shipLength ; i ++ ) { if ( ship . hits [ i ] != \"hit\" ) { return false ; } } return true ; }, generateShipLocations : function () { var locations ; for ( var i = 0 ; i < this . numShips ; i ++ ) { do { locations = this . generateShip (); } while ( this . collision ( locations )); this . ships [ i ]. locations = locations ; } }, generateShip : function () { var direction = Math . floor ( Math . random () * 2 ); var row ; var col ; if ( direction === 1 ) { row = Math . floor ( Math . random () * this . boardSize ); col = Math . floor ( Math . random () * ( this . boardSize - ( this . shipLength + 1 ))); } else { row = Math . floor ( Math . random () * ( this . boardSize - ( this . shipLength + 1 ))); col = Math . floor ( Math . random () * this . boardSize ); } var newShipLocations = []; for ( var i = 0 ; i < this . shipLength ; i ++ ) { if ( direction === 1 ) { newShipLocations . push ( row + \"\" + ( col + i )); } else { newShipLocations . push (( row + i ) + \"\" + col ); } } return newShipLocations ; }, collision : function ( locations ) { for ( var i = 0 ; i < this . numShips ; i ++ ) { var ship = this . ships [ i ]; for ( var j = 0 ; j < locations . length ; j ++ ) { if ( ship . locations . indexOf ( locations [ j ]) >= 0 ) { return true ; } } } return false ; } }; var controller = { guesses : 0 , processGuess : function ( guess ) { var location = parseGuess ( guess ); if ( location ) { this . guesses ++ ; var hit = model . fire ( location ); if ( hit && model . shipsSunk === model . numShips ) { view . displayMessage ( \"You sank all my battleships, in \" + this . guesses + \" guesses\" ); } } } } function parseGuess ( guess ) { var alphabet = [ \"A\" , \"B\" , \"C\" , \"D\" , \"E\" , \"F\" , \"G\" ]; if ( guess == null || guess . length !== 2 ) { alert ( \"Oops, please enter a letter and a number on the board.\" ); } else { var firstChar = guess . charAt ( 0 ); var row = alphabet . indexOf ( firstChar ); var column = guess . charAt ( 1 ); if ( isNaN ( row ) || isNaN ( column )) { alert ( \"Oops, that isn't on the board.\" ); } else if ( row < 0 || row >= model . boardSize || column < 0 || column >= model . boardSize ) { alert ( \"Oops, that's off the board!\" ); } else { return row + column ; } return null ; } } function init () { var fireButton = document . getElementById ( \"fireButton\" ); fireButton . onclick = handleFireButton ; var guessInput = document . getElementById ( \"guessInput\" ); guessInput . onkeypress = handleKeyPress ; model . generateShipLocations (); } window . onload = init ; function handleFireButton () { var guessInput = document . getElementById ( \"guessInput\" ); var guess = guessInput . value ; controller . processGuess ( guess ); guessInput . value = \"\" ; } function handleKeyPress ( e ) { var fireButton = document . getElementById ( \"fireButton\" ); if ( e . keyCode === 13 ) { fireButton . click (); return false ; } } /* model.fire(\"53\"); model.fire(\"06\"); model.fire(\"16\"); model.fire(\"26\"); model.fire(\"34\"); model.fire(\"24\"); model.fire(\"44\"); model.fire(\"12\"); model.fire(\"11\"); model.fire(\"10\"); */ /* console.log(parseGuess(\"A0\")); console.log(parseGuess(\"B6\")); console.log(parseGuess(\"G3\")); console.log(parseGuess(\"H0\")); console.log(parseGuess(\"A7\")); */ /* controller.processGuess(\"A0\"); controller.processGuess(\"A6\"); controller.processGuess(\"B6\"); controller.processGuess(\"C6\"); controller.processGuess(\"C4\"); controller.processGuess(\"D4\"); controller.processGuess(\"E4\"); controller.processGuess(\"B0\"); controller.processGuess(\"B1\"); controller.processGuess(\"B2\"); */ //view.displayMiss(\"00\"); //view.displayHit(\"34\"); //view.displayMiss(\"55\"); //view.displayHit(\"12\"); //view.displayMiss(\"25\"); //view.displayHit(\"26\"); //view.displayMessage(\"Tap tap, is this thing on?\"); .md-content__button { display: none; }","title":"Code tests"},{"location":"code.html#code-tests","text":"Python C++ HTML and CSS JavaScript # Finally, I can present Python code on my website. def sum ( a , b ): return a + b def sub ( a , b ): return a - b def mul ( a , b ): return a * b def div ( a , b ): return a / b a = float ( input ( 'First: ' )) b = float ( input ( 'Second: ' )) op = input ( 'Operation (sum/sub/mul/div): ' ) if op == 'sum' : print ( f 'a + b = { sum ( a , b ) } ' ) elif op == 'sub' : print ( f 'a - b = { sub ( a , b ) } ' ) elif op == 'mul' : print ( f 'a * b = { mul ( a , b ) } ' ) elif op == 'div' : print ( f 'a / b = { div ( a , b ) } ' ) else : print ( 'Invalid Operation!' ) /* How about C++? */ private void index (){ MessageBox . Show ( \"hello world\" ); } // Or HTML and CSS (with a few extra long lines of code)? <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Battleship </ title > < style > body { background-color : black ; } div # board { position : relative ; width : 1024 px ; height : 863 px ; margin : auto ; background : url ( \"board.jpg\" ) no-repeat ; } div # messageArea { position : absolute ; top : 0 px ; left : 0 px ; color : rgb ( 83 , 175 , 19 ); } table { position : absolute ; left : 173 px ; top : 98 px ; border-spacing : 0 px ; } td { width : 94 px ; height : 94 px ; } form { position : absolute ; bottom : 0 px ; right : 0 px ; padding : 15 px ; background-color : rgb ( 83 , 175 , 19 ); } form input { background-color : rgb ( 152 , 207 , 113 ); border-color : rgb ( 83 , 175 , 19 ); font-size : 1 em ; } . hit { background : url ( \"ship.png\" ) no-repeat center center ; } . miss { background : url ( \"miss.png\" ) no-repeat center center ; } </ style > </ head > </ body > < div id = \"board\" > < div id = \"messageArea\" ></ div > < table > < tr > < td id = \"00\" ></ td >< td id = \"01\" ></ td >< td id = \"02\" ></ td >< td id = \"03\" ></ td >< td id = \"04\" ></ td >< td id = \"05\" ></ td >< td id = \"06\" ></ td > </ tr > < tr > < td id = \"10\" ></ td >< td id = \"11\" ></ td >< td id = \"12\" ></ td >< td id = \"13\" ></ td >< td id = \"14\" ></ td >< td id = \"15\" ></ td >< td id = \"16\" ></ td > </ tr > < tr > < td id = \"20\" ></ td >< td id = \"21\" ></ td >< td id = \"22\" ></ td >< td id = \"23\" ></ td >< td id = \"24\" ></ td >< td id = \"25\" ></ td >< td id = \"26\" ></ td > </ tr > < tr > < td id = \"30\" ></ td >< td id = \"31\" ></ td >< td id = \"32\" ></ td >< td id = \"33\" ></ td >< td id = \"34\" ></ td >< td id = \"35\" ></ td >< td id = \"36\" ></ td > </ tr > < tr > < td id = \"40\" ></ td >< td id = \"41\" ></ td >< td id = \"42\" ></ td >< td id = \"43\" ></ td >< td id = \"44\" ></ td >< td id = \"45\" ></ td >< td id = \"46\" ></ td > </ tr > < tr > < td id = \"50\" ></ td >< td id = \"51\" ></ td >< td id = \"52\" ></ td >< td id = \"53\" ></ td >< td id = \"54\" ></ td >< td id = \"55\" ></ td >< td id = \"56\" ></ td > </ tr > < tr > < td id = \"60\" ></ td >< td id = \"61\" ></ td >< td id = \"62\" ></ td >< td id = \"63\" ></ td >< td id = \"64\" ></ td >< td id = \"65\" ></ td >< td id = \"66\" ></ td > </ tr > </ table > < form > < input type = \"text\" id = \"guessInput\" placeholder = \"A0\" > < input type = \"button\" id = \"fireButton\" value = \"Fire!\" > </ form > </ div > < script src = \"battleship2.js\" ></ script > </ body > </ html > // Or JavaScript? var view = { displayMessage : function ( msg ) { var messageArea = document . getElementById ( \"messageArea\" ); messageArea . innerHTML = msg ; }, displayHit : function ( location ) { var cell = document . getElementById ( location ); cell . setAttribute ( \"class\" , \"hit\" ); }, displayMiss : function ( location ) { var cell = document . getElementById ( location ); cell . setAttribute ( \"class\" , \"miss\" ); } }; var model = { boardSize : 7 , numShips : 3 , shipLength : 3 , shipsSunk : 0 , ships : [{ locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }, { locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }, { locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }], fire : function ( guess ) { for ( var i = 0 ; i < this . numShips ; i ++ ) { var ship = this . ships [ i ]; var index = ship . locations . indexOf ( guess ); if ( index >= 0 ) { ship . hits [ index ] = \"hit\" ; view . displayHit ( guess ); view . displayMessage ( \"HIT!\" ); if ( this . isSunk ( ship )) { view . displayMessage ( \"You sank my battleship!\" ); this . shipsSunk ++ ; } return true ; } } view . displayMiss ( guess ); view . displayMessage ( \"You missed.\" ); return false ; }, isSunk : function ( ship ) { for ( var i = 0 ; i < this . shipLength ; i ++ ) { if ( ship . hits [ i ] != \"hit\" ) { return false ; } } return true ; }, generateShipLocations : function () { var locations ; for ( var i = 0 ; i < this . numShips ; i ++ ) { do { locations = this . generateShip (); } while ( this . collision ( locations )); this . ships [ i ]. locations = locations ; } }, generateShip : function () { var direction = Math . floor ( Math . random () * 2 ); var row ; var col ; if ( direction === 1 ) { row = Math . floor ( Math . random () * this . boardSize ); col = Math . floor ( Math . random () * ( this . boardSize - ( this . shipLength + 1 ))); } else { row = Math . floor ( Math . random () * ( this . boardSize - ( this . shipLength + 1 ))); col = Math . floor ( Math . random () * this . boardSize ); } var newShipLocations = []; for ( var i = 0 ; i < this . shipLength ; i ++ ) { if ( direction === 1 ) { newShipLocations . push ( row + \"\" + ( col + i )); } else { newShipLocations . push (( row + i ) + \"\" + col ); } } return newShipLocations ; }, collision : function ( locations ) { for ( var i = 0 ; i < this . numShips ; i ++ ) { var ship = this . ships [ i ]; for ( var j = 0 ; j < locations . length ; j ++ ) { if ( ship . locations . indexOf ( locations [ j ]) >= 0 ) { return true ; } } } return false ; } }; var controller = { guesses : 0 , processGuess : function ( guess ) { var location = parseGuess ( guess ); if ( location ) { this . guesses ++ ; var hit = model . fire ( location ); if ( hit && model . shipsSunk === model . numShips ) { view . displayMessage ( \"You sank all my battleships, in \" + this . guesses + \" guesses\" ); } } } } function parseGuess ( guess ) { var alphabet = [ \"A\" , \"B\" , \"C\" , \"D\" , \"E\" , \"F\" , \"G\" ]; if ( guess == null || guess . length !== 2 ) { alert ( \"Oops, please enter a letter and a number on the board.\" ); } else { var firstChar = guess . charAt ( 0 ); var row = alphabet . indexOf ( firstChar ); var column = guess . charAt ( 1 ); if ( isNaN ( row ) || isNaN ( column )) { alert ( \"Oops, that isn't on the board.\" ); } else if ( row < 0 || row >= model . boardSize || column < 0 || column >= model . boardSize ) { alert ( \"Oops, that's off the board!\" ); } else { return row + column ; } return null ; } } function init () { var fireButton = document . getElementById ( \"fireButton\" ); fireButton . onclick = handleFireButton ; var guessInput = document . getElementById ( \"guessInput\" ); guessInput . onkeypress = handleKeyPress ; model . generateShipLocations (); } window . onload = init ; function handleFireButton () { var guessInput = document . getElementById ( \"guessInput\" ); var guess = guessInput . value ; controller . processGuess ( guess ); guessInput . value = \"\" ; } function handleKeyPress ( e ) { var fireButton = document . getElementById ( \"fireButton\" ); if ( e . keyCode === 13 ) { fireButton . click (); return false ; } } /* model.fire(\"53\"); model.fire(\"06\"); model.fire(\"16\"); model.fire(\"26\"); model.fire(\"34\"); model.fire(\"24\"); model.fire(\"44\"); model.fire(\"12\"); model.fire(\"11\"); model.fire(\"10\"); */ /* console.log(parseGuess(\"A0\")); console.log(parseGuess(\"B6\")); console.log(parseGuess(\"G3\")); console.log(parseGuess(\"H0\")); console.log(parseGuess(\"A7\")); */ /* controller.processGuess(\"A0\"); controller.processGuess(\"A6\"); controller.processGuess(\"B6\"); controller.processGuess(\"C6\"); controller.processGuess(\"C4\"); controller.processGuess(\"D4\"); controller.processGuess(\"E4\"); controller.processGuess(\"B0\"); controller.processGuess(\"B1\"); controller.processGuess(\"B2\"); */ //view.displayMiss(\"00\"); //view.displayHit(\"34\"); //view.displayMiss(\"55\"); //view.displayHit(\"12\"); //view.displayMiss(\"25\"); //view.displayHit(\"26\"); //view.displayMessage(\"Tap tap, is this thing on?\"); .md-content__button { display: none; }","title":"Code tests"},{"location":"robot_spiral_1.html","text":"Robot spiral 1 I tried to setup Johnny-Five but it didn't work. I tried to make a Python GUI using this tutorial but that didn't work. This tutorial for making a Python script turn an Arduino LED on and off worked! https://pythonforundergradengineers.com/python-arduino-LED.html .md-content__button { display: none; }","title":"Robot notes"},{"location":"robot_spiral_1.html#robot-spiral-1","text":"I tried to setup Johnny-Five but it didn't work. I tried to make a Python GUI using this tutorial but that didn't work. This tutorial for making a Python script turn an Arduino LED on and off worked! https://pythonforundergradengineers.com/python-arduino-LED.html .md-content__button { display: none; }","title":"Robot spiral 1"},{"location":"seeed.html","text":"My experience with Seeed Studio I took part in the Fab Academy in 2023 and the experience changed me. The evolution of my electronics design skills over the course of the Fab Academy. The course puts a heavy emphasis on digital electronics, because that's what makes things come alive! I designed my first electronic circuit in January 2023. It was a Xiao RP2040, a button and a blue LED with a current-limiting resistor. I calculated the correct value for the resistor, opened up KiCAD for the first time, watched a few tutorials and then exported the design as an SVG file. I edited the design in Inkscape and cut it out of some adhesive-backed copper sheet and glued it to a laser cut plate. I tried my hand at soldering the SMD components (the Xiao was easy to solder) and then it was time for the moment of truth. I loaded the Blink example sketch onto the Xiao and my blue LED blinked! I was so happy! Here I've programmed the button to turn on the LED: The tea machine I made more circuits during the Fab Academy, but my next major step was a machine control board for the machine building group project. We made a tea-steeping machine. The Icelandic Machine Week team: Svavar, Andri and Hafey. In the Fab Academy, we talk about spiral development. The trick to developing a working product is to make a very rough version the whole thing (instead of perfecting a small part of it) and then doing another spiral to fix bugs and add features, and so on as long as you have time. Machine controller spiral 1 Machine control spiral 1: An L298N stepper driver module on a breadboard with a SparkFun RedBoard, which is essentially the same thing as an Arduino Uno. Machine controller spiral 2 The second spiral was to make a custom board with a Xiao RP2040 microcontroller module, a DRV8825 StepStick motor controller, 12V input pins from a lab power supply and GPIO breakout pins for a servo and two buttons. In Machine Week I made my biggest leap forward in electronics design. I also developed my methodical method of breadboarding and testing the hardware and software, one element at a time, before transferring the design over to KiCAD. The custom board that I made is an extension of spiral 2. The first board had mounting holes that were far too big and the board also came loose during milling. Bad board and good board. I input a radius for the mounting holes when I thought I was defining their diameter. So the holes are huge on the board on the left! And I didn't use enough double-sided tape to secure the PCB blank, so it shifted during the trace milling operation. After a redesign, the second attempt to mill the board went well. The board on the right is the final version of the TeaManator controller board. I forgot the drilling holes for the electrolytic bulk storage capacitor for the stepper driver, so I drilled those holes afterwards. Hand drilling the last two holes in the board. I only had through-hole female headers, so I bent their legs in order to be able to surface mount them. Bending the legs for surface mounting. The final TeaManator machine controller. I learned a lesson in considering which side through-hole components need to be on in order to touch the copper traces. Close-up of the machine controller, all connected up. The TeaManator 2000 tea steeping machine. Clean and elegant. The reality behind the facade. The USB hub (with AC adapter) and the big power supply are only there to supply 5V to the Xiao and 12V to the stepper driver, because we didn't have time to learn how to make a power supply. I realized then that I need to think seriously about a neat way to power my final project. My final project","title":"Seeed"},{"location":"seeed.html#my-experience-with-seeed-studio","text":"I took part in the Fab Academy in 2023 and the experience changed me. The evolution of my electronics design skills over the course of the Fab Academy. The course puts a heavy emphasis on digital electronics, because that's what makes things come alive! I designed my first electronic circuit in January 2023. It was a Xiao RP2040, a button and a blue LED with a current-limiting resistor. I calculated the correct value for the resistor, opened up KiCAD for the first time, watched a few tutorials and then exported the design as an SVG file. I edited the design in Inkscape and cut it out of some adhesive-backed copper sheet and glued it to a laser cut plate. I tried my hand at soldering the SMD components (the Xiao was easy to solder) and then it was time for the moment of truth. I loaded the Blink example sketch onto the Xiao and my blue LED blinked! I was so happy! Here I've programmed the button to turn on the LED:","title":"My experience with Seeed Studio"},{"location":"seeed.html#the-tea-machine","text":"I made more circuits during the Fab Academy, but my next major step was a machine control board for the machine building group project. We made a tea-steeping machine. The Icelandic Machine Week team: Svavar, Andri and Hafey. In the Fab Academy, we talk about spiral development. The trick to developing a working product is to make a very rough version the whole thing (instead of perfecting a small part of it) and then doing another spiral to fix bugs and add features, and so on as long as you have time.","title":"The tea machine"},{"location":"seeed.html#machine-controller-spiral-1","text":"Machine control spiral 1: An L298N stepper driver module on a breadboard with a SparkFun RedBoard, which is essentially the same thing as an Arduino Uno.","title":"Machine controller spiral 1"},{"location":"seeed.html#machine-controller-spiral-2","text":"The second spiral was to make a custom board with a Xiao RP2040 microcontroller module, a DRV8825 StepStick motor controller, 12V input pins from a lab power supply and GPIO breakout pins for a servo and two buttons. In Machine Week I made my biggest leap forward in electronics design. I also developed my methodical method of breadboarding and testing the hardware and software, one element at a time, before transferring the design over to KiCAD. The custom board that I made is an extension of spiral 2. The first board had mounting holes that were far too big and the board also came loose during milling. Bad board and good board. I input a radius for the mounting holes when I thought I was defining their diameter. So the holes are huge on the board on the left! And I didn't use enough double-sided tape to secure the PCB blank, so it shifted during the trace milling operation. After a redesign, the second attempt to mill the board went well. The board on the right is the final version of the TeaManator controller board. I forgot the drilling holes for the electrolytic bulk storage capacitor for the stepper driver, so I drilled those holes afterwards. Hand drilling the last two holes in the board. I only had through-hole female headers, so I bent their legs in order to be able to surface mount them. Bending the legs for surface mounting. The final TeaManator machine controller. I learned a lesson in considering which side through-hole components need to be on in order to touch the copper traces. Close-up of the machine controller, all connected up. The TeaManator 2000 tea steeping machine. Clean and elegant. The reality behind the facade. The USB hub (with AC adapter) and the big power supply are only there to supply 5V to the Xiao and 12V to the stepper driver, because we didn't have time to learn how to make a power supply. I realized then that I need to think seriously about a neat way to power my final project.","title":"Machine controller spiral 2"},{"location":"seeed.html#my-final-project","text":"","title":"My final project"},{"location":"setup.html","text":"Setup In a video call, \u00c1rni Bj\u00f6rnsson showed M\u00f3ses and me how to set up MkDocs and Git. I've summarized all the steps here, with a few extra resources I found along the way: MkDocs setup from scratch First, I installed the VSCode code editor. Then, as \u00c1rni Bj\u00f6rnsson suggested, I created a folder called code directly in my C: drive, so that Dropbox and OneDrive don't try to sync the folder and mess up my GitHub connection. I followed this tutorial to set up MkDocs. There are a few steps to it: It starts with installing the Python extension for VSCode . The pip package manager is included with the Python extension, but for some reason you don't always get the latest version. It may be a good idea to check the version. I opened a new terminal in the top menu in VSCode ( Terminal -> New Terminal ) and typed pip --version pip 22.3.1 from C:\\Users\\your_username\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pip (python 3.10) and if it says it's out of date you can upgrade pip like this: pip install --upgrade pip Now it was time to install MkDocs: pip install mkdocs Then, as the tutorial suggests, I typed mkdocs --version to see if the installation went OK: mkdocs --version mkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8) (optional) I also installed the Material theme because it seemed nice and it includes expandable code annotations: pip install mkdocs-material Note To enable notes like this one in MkDocs, I added Admonitions to the extensions in the mkdocs.yml file: markdown_extensions : admonition Then, to create a note, start with !!! note and then indent the note text: !!! note Note text MkDocs test drive I followed this tutorial to set up a small test website and get a live preview. After installing Material for MkDocs, I made a folder called Mkdocs. Then I opened a terminal and made sure that it was in the right folder: cd C:\\code\\Mkdocs Then I simply typed mkdocs new . and that was enough to create a simple site! Well, there are a few extra steps to view the site and deploy it, but this whole process is very simple. Then I added the following lines to mkdocs.yml: theme : name : material This is geared towards the Material theme for MkDocs, so if you're using a different theme, the only thing you need to change is the the theme line in the mkdocs.yml file. Set up autocomplete. The tutorial suggests adding a line to settings.json, but it doesn't mention where that file is in VSCode. But it does provide a link to instructions. You go into File -> Preferences -> Settings , scroll all the way down to Yaml: Schemas, and click Edit in settings.json . Then you add the line \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\" , so in the end it looks like this: { \"workbench.colorTheme\" : \"Default Dark+\" , \"files.autoSave\" : \"afterDelay\" , \"yaml.schemas\" : { \"https://squidfunk.github.io/mkdocs-material/schema.json\" : \"mkdocs.yml\" } } OK, now we're yearning for something to happen. Type the following into the terminal: mkdocs serve Now open your browser and write localhost:8000 in the address bar. Voil\u00e1! We have a live preview for an MkDocs website! Material theme Default theme The source code for this site, written in Markdown, looks like this: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://www.mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs -h` - Print help message and exit. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. As you can see, Markdown is simple and readable. Writing # gives you the biggest heading, ## gives you heading 2, and so on. Put * in front of text to make a bullet point. To add a link, you do this: [mkdocs.org](https://www.mkdocs.org) and to add an image you do the same, but with an exclamation mark: ![Material theme](./images/material.png) 5. Finally, to build a static site, write this in the terminal: mkdocs build I tried this and got an index page that works fine. But when I clicked the Setup page (this page) I got this: Hm. Apparently you need to put the structure of the site into your mkdocs.yml file to explicitly state the site navigation. So I opened it up and added nav: - 'index.md' - 'code.md' # The code page is just a few code block tests in different languages. - 'setup.md' No, that didn't work either. After some looking around I found a solution . I added the following line to mkdocs.yml : use_directory_urls: false It works! And the first solution is unnecessary; MkDocs will infer the site navigation based on the pages you create in the docs folder. Setting up MkDocs and getting the live preview working took me an hour in the morning. Writing up how I did it took me the rest of the day. It was a great way to learn Markdown. I like Markdown, with one exception; I don't have the ` symbol on my keyboard. I need to use that quite a lot for code snippets. Now this page serves as my reference in writing documentation. Note To enable code highlighting (coloring the code, similar to how it looks in the VSCode editor), I added the following lines to mkdocs.yml : markdown_extensions: - pymdownx.highlight: anchor_linenums: true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences - pymdownx.details I'm not sure if all these lines are necessary, but I'm just following this tutorial . The last line comes from somewhere else, I don't remember where. Anyway, now I can make a code block by enclosing the code with ``` at the top and bottom and including the name of the language at the top: ```python # This program prints Hello, world! print('Hello, world!') ``` This results in: # This program prints Hello, world! print ( 'Hello, world!' ) You can use this reference to write the name of the programming language correctly at the top of your code block. One more thing, I also added markdown_extensions : - attr_list - md_in_html to add the ability to align images, add captions and mark large images for lazy loading, as per this tutorial . Customizing the theme There is a way to toggle between light and dark mode. This tutorial says that it's enough to copy the following code into mkdocs.yml : Light/dark toggle Light/dark toggle + Color change theme : palette : # Palette toggle for light mode - scheme : default toggle : icon : material/brightness-7 name : Switch to dark mode # Palette toggle for dark mode - scheme : slate toggle : icon : material/brightness-4 name : Switch to light mode theme : palette : # Palette toggle for light mode - scheme : default toggle : icon : material/brightness-7 name : Switch to dark mode primary : red accent : red # Palette toggle for dark mode - scheme : slate toggle : icon : material/brightness-4 name : Switch to light mode primary : red accent : red Source code for the content tabs above === \"Light/dark toggle\" ``` yaml theme: palette: # Palette toggle for light mode - scheme: default toggle: icon: material/brightness-7 name: Switch to dark mode # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-4 name: Switch to light mode ``` === \"Light/dark toggle + Color change\" ``` yaml palette: # Palette toggle for light mode - scheme: default toggle: icon: material/brightness-7 name: Switch to dark mode primary: red accent: red # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-4 name: Switch to light mode primary: red accent: red ``` Note How to enable content tabs in mkdocs.yaml : markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true I also discovered that if you select a command, right click and select Change All Occurrences in VSCode, you only need to write the new color once, instead of four times. Nice! Finally, I made a logo in Inkscape. I designed this logo in grade school, it's a kind of Icelandic rune that combines my initials S and K. Then I added two lines to mkdocs.yml to change the logo in the top left corner and also the favicon (the icon you see in the browser tab). theme : logo : images\\SK_logo.svg favicon : images\\SK_logo.svg First I wrote the path as /images/SK_logo.SVG and VSCode complained about the formatting. I found that you can right click the image and select Copy Relative Path to get the right formatting. That gave me docs\\images\\SK_logo.svg , which didn't work, but when I changed it to images\\SK_logo.svg it worked. I also enabled two navigation options: theme : features : - navigation.instant # Instant loading (page behaves like a single-page application, search persists between pages) - navigation.tabs # The pages are visible as tabs at the top instead of on the left hand side. GitHub setup To set up a GitHub connection, I followed this official VSCode tutorial and installed the GitHub Pull Requests and Issues extension . I was supposed to sign in but no sign in button appeared when I selected the GitHub icon in the left menu bar in VSCode. I did some more Googling and found an unofficial tutorial that told me to sign in via the Accounts symbol in the bottom left corner of VSCode. I selected Turn on edit sessions sync and signed in with Github in a browser. Then I was redirected to VSCode, but that wasn't the end of it. I selected Accounts again and there an option to sign in to the Github extension appeared. I selected that, signed in in the browser and now I was finally signed in and could continue with the GitHub setup. But the the official tutorial didn't tell me how to get files from my computer to GitHub. I needed to look elsewhere. I threw my hands up in the air and Googled i have code on my computer how do i create github repository . The first result was this official GitHub guide . The third step resulted in an error: The token '&&' is not a valid statement separator in this version. What then? I like MkDocs so far but I don't like Git so far. Let's see what this tutorial gets me: PS C:\\code\\Mkdocs> git init -b main Initialized empty Git repository in C:/code/Mkdocs/.git/ PS C:\\code\\Mkdocs> git status On branch main No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/ mkdocs.yml site/ nothing added to commit but untracked files present (use \"git add\" to track) PS C:\\code\\Mkdocs> git commit On branch main Initial commit Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/ mkdocs.yml site/ nothing added to commit but untracked files present (use \"git add\" to track) PS C:\\code\\Mkdocs> git push fatal: No configured push destination. Either specify the URL from the command-line or configure a remote repository using git remote add <name> <url> and then push using the remote name git push <name> Sigh. Let's try to create a repository in the GitHub web interface and see if we can push these files to it. PS C:\\code\\Mkdocs> git remote add Mkdocs https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git push Mkdocs fatal: The current branch main has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream Mkdocs main To have this happen automatically for branches without a tracking upstream, see 'push.autoSetupRemote' in 'git help config'. What does upstream mean? OK, maybe I need to push specific files and folders inside the Mkdocs directory. PS C:\\code\\Mkdocs> git remote add mkdocs.yml https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git remote add site https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git remote add docs https://github.com/svavarkonn/MkDocs Nothing. Nothing happened. PS C:\\code\\Mkdocs> git push MkDocs error: src refspec refs/heads/main does not match any error: failed to push some refs to 'MkDocs' So far, this is not fun. Page source The Markdown code for the View page Source button is like this: [View page source](setup.txt){ .md-button } I'm going to put it on every page of my documentation. If you see an interesting element in the page, you can then easily see how to set it up. Pointing to a .md file doesn't work, so my workaround is to make a copy of the Markdown source file and change its extension to .txt . I made a Python script using this tutorial and put it in the MkDocs folder. The script copies all the .md files in the docs folder to another folder called textfiles and converts their extension to .txt. To change the theme for just the home page, I followed tmeuze's advice in this issue . To mkdocs.yml I added custom_dir : docs/overrides and created a docs/overrides folder. Then I was unsure how to set up a custom theme, so I stopped there. To enable the Github Repository button in the top right corner, I followed this example and added the following to my mkdocs.yml , just below site_name : repo_name : Github Repository repo_url : https://github.com/svavarkonn/MkDocs I added theme : features : - navigation.tracking so that the URL in the address bar changes as you scroll down the page. If you copy the URL, the page will open in the section where you were when you copied it. Might be convenient if someone wants to cite something on this site. I also added theme : features : - navigation.tabs - navigation.tabs.sticky to make the top navigation follow you as you scroll down the page. By default, an \"Edit this page\" symbol is added to the right of the headline of every page. When you click it you just get a 404 error. I followed [this] to remove the edit button. I just add < style > . md-content__button { display : none ; } </ style > to the .md file of each page and voil\u00e1! The edit button disappears. View page source .md-content__button { display: none; }","title":"Setup"},{"location":"setup.html#setup","text":"In a video call, \u00c1rni Bj\u00f6rnsson showed M\u00f3ses and me how to set up MkDocs and Git. I've summarized all the steps here, with a few extra resources I found along the way:","title":"Setup"},{"location":"setup.html#mkdocs-setup-from-scratch","text":"First, I installed the VSCode code editor. Then, as \u00c1rni Bj\u00f6rnsson suggested, I created a folder called code directly in my C: drive, so that Dropbox and OneDrive don't try to sync the folder and mess up my GitHub connection. I followed this tutorial to set up MkDocs. There are a few steps to it: It starts with installing the Python extension for VSCode . The pip package manager is included with the Python extension, but for some reason you don't always get the latest version. It may be a good idea to check the version. I opened a new terminal in the top menu in VSCode ( Terminal -> New Terminal ) and typed pip --version pip 22.3.1 from C:\\Users\\your_username\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pip (python 3.10) and if it says it's out of date you can upgrade pip like this: pip install --upgrade pip Now it was time to install MkDocs: pip install mkdocs Then, as the tutorial suggests, I typed mkdocs --version to see if the installation went OK: mkdocs --version mkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8) (optional) I also installed the Material theme because it seemed nice and it includes expandable code annotations: pip install mkdocs-material Note To enable notes like this one in MkDocs, I added Admonitions to the extensions in the mkdocs.yml file: markdown_extensions : admonition Then, to create a note, start with !!! note and then indent the note text: !!! note Note text","title":"MkDocs setup from scratch"},{"location":"setup.html#mkdocs-test-drive","text":"I followed this tutorial to set up a small test website and get a live preview. After installing Material for MkDocs, I made a folder called Mkdocs. Then I opened a terminal and made sure that it was in the right folder: cd C:\\code\\Mkdocs Then I simply typed mkdocs new . and that was enough to create a simple site! Well, there are a few extra steps to view the site and deploy it, but this whole process is very simple. Then I added the following lines to mkdocs.yml: theme : name : material This is geared towards the Material theme for MkDocs, so if you're using a different theme, the only thing you need to change is the the theme line in the mkdocs.yml file. Set up autocomplete. The tutorial suggests adding a line to settings.json, but it doesn't mention where that file is in VSCode. But it does provide a link to instructions. You go into File -> Preferences -> Settings , scroll all the way down to Yaml: Schemas, and click Edit in settings.json . Then you add the line \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\" , so in the end it looks like this: { \"workbench.colorTheme\" : \"Default Dark+\" , \"files.autoSave\" : \"afterDelay\" , \"yaml.schemas\" : { \"https://squidfunk.github.io/mkdocs-material/schema.json\" : \"mkdocs.yml\" } } OK, now we're yearning for something to happen. Type the following into the terminal: mkdocs serve Now open your browser and write localhost:8000 in the address bar. Voil\u00e1! We have a live preview for an MkDocs website! Material theme Default theme The source code for this site, written in Markdown, looks like this: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://www.mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs -h` - Print help message and exit. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. As you can see, Markdown is simple and readable. Writing # gives you the biggest heading, ## gives you heading 2, and so on. Put * in front of text to make a bullet point. To add a link, you do this: [mkdocs.org](https://www.mkdocs.org) and to add an image you do the same, but with an exclamation mark: ![Material theme](./images/material.png) 5. Finally, to build a static site, write this in the terminal: mkdocs build I tried this and got an index page that works fine. But when I clicked the Setup page (this page) I got this: Hm. Apparently you need to put the structure of the site into your mkdocs.yml file to explicitly state the site navigation. So I opened it up and added nav: - 'index.md' - 'code.md' # The code page is just a few code block tests in different languages. - 'setup.md' No, that didn't work either. After some looking around I found a solution . I added the following line to mkdocs.yml : use_directory_urls: false It works! And the first solution is unnecessary; MkDocs will infer the site navigation based on the pages you create in the docs folder. Setting up MkDocs and getting the live preview working took me an hour in the morning. Writing up how I did it took me the rest of the day. It was a great way to learn Markdown. I like Markdown, with one exception; I don't have the ` symbol on my keyboard. I need to use that quite a lot for code snippets. Now this page serves as my reference in writing documentation. Note To enable code highlighting (coloring the code, similar to how it looks in the VSCode editor), I added the following lines to mkdocs.yml : markdown_extensions: - pymdownx.highlight: anchor_linenums: true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences - pymdownx.details I'm not sure if all these lines are necessary, but I'm just following this tutorial . The last line comes from somewhere else, I don't remember where. Anyway, now I can make a code block by enclosing the code with ``` at the top and bottom and including the name of the language at the top: ```python # This program prints Hello, world! print('Hello, world!') ``` This results in: # This program prints Hello, world! print ( 'Hello, world!' ) You can use this reference to write the name of the programming language correctly at the top of your code block. One more thing, I also added markdown_extensions : - attr_list - md_in_html to add the ability to align images, add captions and mark large images for lazy loading, as per this tutorial .","title":"MkDocs test drive"},{"location":"setup.html#customizing-the-theme","text":"There is a way to toggle between light and dark mode. This tutorial says that it's enough to copy the following code into mkdocs.yml : Light/dark toggle Light/dark toggle + Color change theme : palette : # Palette toggle for light mode - scheme : default toggle : icon : material/brightness-7 name : Switch to dark mode # Palette toggle for dark mode - scheme : slate toggle : icon : material/brightness-4 name : Switch to light mode theme : palette : # Palette toggle for light mode - scheme : default toggle : icon : material/brightness-7 name : Switch to dark mode primary : red accent : red # Palette toggle for dark mode - scheme : slate toggle : icon : material/brightness-4 name : Switch to light mode primary : red accent : red Source code for the content tabs above === \"Light/dark toggle\" ``` yaml theme: palette: # Palette toggle for light mode - scheme: default toggle: icon: material/brightness-7 name: Switch to dark mode # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-4 name: Switch to light mode ``` === \"Light/dark toggle + Color change\" ``` yaml palette: # Palette toggle for light mode - scheme: default toggle: icon: material/brightness-7 name: Switch to dark mode primary: red accent: red # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-4 name: Switch to light mode primary: red accent: red ``` Note How to enable content tabs in mkdocs.yaml : markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true I also discovered that if you select a command, right click and select Change All Occurrences in VSCode, you only need to write the new color once, instead of four times. Nice! Finally, I made a logo in Inkscape. I designed this logo in grade school, it's a kind of Icelandic rune that combines my initials S and K. Then I added two lines to mkdocs.yml to change the logo in the top left corner and also the favicon (the icon you see in the browser tab). theme : logo : images\\SK_logo.svg favicon : images\\SK_logo.svg First I wrote the path as /images/SK_logo.SVG and VSCode complained about the formatting. I found that you can right click the image and select Copy Relative Path to get the right formatting. That gave me docs\\images\\SK_logo.svg , which didn't work, but when I changed it to images\\SK_logo.svg it worked. I also enabled two navigation options: theme : features : - navigation.instant # Instant loading (page behaves like a single-page application, search persists between pages) - navigation.tabs # The pages are visible as tabs at the top instead of on the left hand side.","title":"Customizing the theme"},{"location":"setup.html#github-setup","text":"To set up a GitHub connection, I followed this official VSCode tutorial and installed the GitHub Pull Requests and Issues extension . I was supposed to sign in but no sign in button appeared when I selected the GitHub icon in the left menu bar in VSCode. I did some more Googling and found an unofficial tutorial that told me to sign in via the Accounts symbol in the bottom left corner of VSCode. I selected Turn on edit sessions sync and signed in with Github in a browser. Then I was redirected to VSCode, but that wasn't the end of it. I selected Accounts again and there an option to sign in to the Github extension appeared. I selected that, signed in in the browser and now I was finally signed in and could continue with the GitHub setup. But the the official tutorial didn't tell me how to get files from my computer to GitHub. I needed to look elsewhere. I threw my hands up in the air and Googled i have code on my computer how do i create github repository . The first result was this official GitHub guide . The third step resulted in an error: The token '&&' is not a valid statement separator in this version. What then? I like MkDocs so far but I don't like Git so far. Let's see what this tutorial gets me: PS C:\\code\\Mkdocs> git init -b main Initialized empty Git repository in C:/code/Mkdocs/.git/ PS C:\\code\\Mkdocs> git status On branch main No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/ mkdocs.yml site/ nothing added to commit but untracked files present (use \"git add\" to track) PS C:\\code\\Mkdocs> git commit On branch main Initial commit Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/ mkdocs.yml site/ nothing added to commit but untracked files present (use \"git add\" to track) PS C:\\code\\Mkdocs> git push fatal: No configured push destination. Either specify the URL from the command-line or configure a remote repository using git remote add <name> <url> and then push using the remote name git push <name> Sigh. Let's try to create a repository in the GitHub web interface and see if we can push these files to it. PS C:\\code\\Mkdocs> git remote add Mkdocs https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git push Mkdocs fatal: The current branch main has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream Mkdocs main To have this happen automatically for branches without a tracking upstream, see 'push.autoSetupRemote' in 'git help config'. What does upstream mean? OK, maybe I need to push specific files and folders inside the Mkdocs directory. PS C:\\code\\Mkdocs> git remote add mkdocs.yml https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git remote add site https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git remote add docs https://github.com/svavarkonn/MkDocs Nothing. Nothing happened. PS C:\\code\\Mkdocs> git push MkDocs error: src refspec refs/heads/main does not match any error: failed to push some refs to 'MkDocs' So far, this is not fun.","title":"GitHub setup"},{"location":"setup.html#page-source","text":"The Markdown code for the View page Source button is like this: [View page source](setup.txt){ .md-button } I'm going to put it on every page of my documentation. If you see an interesting element in the page, you can then easily see how to set it up. Pointing to a .md file doesn't work, so my workaround is to make a copy of the Markdown source file and change its extension to .txt . I made a Python script using this tutorial and put it in the MkDocs folder. The script copies all the .md files in the docs folder to another folder called textfiles and converts their extension to .txt. To change the theme for just the home page, I followed tmeuze's advice in this issue . To mkdocs.yml I added custom_dir : docs/overrides and created a docs/overrides folder. Then I was unsure how to set up a custom theme, so I stopped there. To enable the Github Repository button in the top right corner, I followed this example and added the following to my mkdocs.yml , just below site_name : repo_name : Github Repository repo_url : https://github.com/svavarkonn/MkDocs I added theme : features : - navigation.tracking so that the URL in the address bar changes as you scroll down the page. If you copy the URL, the page will open in the section where you were when you copied it. Might be convenient if someone wants to cite something on this site. I also added theme : features : - navigation.tabs - navigation.tabs.sticky to make the top navigation follow you as you scroll down the page. By default, an \"Edit this page\" symbol is added to the right of the headline of every page. When you click it you just get a 404 error. I followed [this] to remove the edit button. I just add < style > . md-content__button { display : none ; } </ style > to the .md file of each page and voil\u00e1! The edit button disappears. View page source .md-content__button { display: none; }","title":"Page source"}]}