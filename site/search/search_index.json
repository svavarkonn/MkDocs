{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. .md-content__button { display: none; }","title":"Home"},{"location":"index.html#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. .md-content__button { display: none; }","title":"Project layout"},{"location":"code.html","text":"Code tests Python C++ HTML and CSS JavaScript # Finally, I can present Python code on my website. def sum ( a , b ): return a + b def sub ( a , b ): return a - b def mul ( a , b ): return a * b def div ( a , b ): return a / b a = float ( input ( 'First: ' )) b = float ( input ( 'Second: ' )) op = input ( 'Operation (sum/sub/mul/div): ' ) if op == 'sum' : print ( f 'a + b = { sum ( a , b ) } ' ) elif op == 'sub' : print ( f 'a - b = { sub ( a , b ) } ' ) elif op == 'mul' : print ( f 'a * b = { mul ( a , b ) } ' ) elif op == 'div' : print ( f 'a / b = { div ( a , b ) } ' ) else : print ( 'Invalid Operation!' ) /* How about C++? */ private void index (){ MessageBox . Show ( \"hello world\" ); } // Or HTML and CSS (with a few extra long lines of code)? <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Battleship </ title > < style > body { background-color : black ; } div # board { position : relative ; width : 1024 px ; height : 863 px ; margin : auto ; background : url ( \"board.jpg\" ) no-repeat ; } div # messageArea { position : absolute ; top : 0 px ; left : 0 px ; color : rgb ( 83 , 175 , 19 ); } table { position : absolute ; left : 173 px ; top : 98 px ; border-spacing : 0 px ; } td { width : 94 px ; height : 94 px ; } form { position : absolute ; bottom : 0 px ; right : 0 px ; padding : 15 px ; background-color : rgb ( 83 , 175 , 19 ); } form input { background-color : rgb ( 152 , 207 , 113 ); border-color : rgb ( 83 , 175 , 19 ); font-size : 1 em ; } . hit { background : url ( \"ship.png\" ) no-repeat center center ; } . miss { background : url ( \"miss.png\" ) no-repeat center center ; } </ style > </ head > </ body > < div id = \"board\" > < div id = \"messageArea\" ></ div > < table > < tr > < td id = \"00\" ></ td >< td id = \"01\" ></ td >< td id = \"02\" ></ td >< td id = \"03\" ></ td >< td id = \"04\" ></ td >< td id = \"05\" ></ td >< td id = \"06\" ></ td > </ tr > < tr > < td id = \"10\" ></ td >< td id = \"11\" ></ td >< td id = \"12\" ></ td >< td id = \"13\" ></ td >< td id = \"14\" ></ td >< td id = \"15\" ></ td >< td id = \"16\" ></ td > </ tr > < tr > < td id = \"20\" ></ td >< td id = \"21\" ></ td >< td id = \"22\" ></ td >< td id = \"23\" ></ td >< td id = \"24\" ></ td >< td id = \"25\" ></ td >< td id = \"26\" ></ td > </ tr > < tr > < td id = \"30\" ></ td >< td id = \"31\" ></ td >< td id = \"32\" ></ td >< td id = \"33\" ></ td >< td id = \"34\" ></ td >< td id = \"35\" ></ td >< td id = \"36\" ></ td > </ tr > < tr > < td id = \"40\" ></ td >< td id = \"41\" ></ td >< td id = \"42\" ></ td >< td id = \"43\" ></ td >< td id = \"44\" ></ td >< td id = \"45\" ></ td >< td id = \"46\" ></ td > </ tr > < tr > < td id = \"50\" ></ td >< td id = \"51\" ></ td >< td id = \"52\" ></ td >< td id = \"53\" ></ td >< td id = \"54\" ></ td >< td id = \"55\" ></ td >< td id = \"56\" ></ td > </ tr > < tr > < td id = \"60\" ></ td >< td id = \"61\" ></ td >< td id = \"62\" ></ td >< td id = \"63\" ></ td >< td id = \"64\" ></ td >< td id = \"65\" ></ td >< td id = \"66\" ></ td > </ tr > </ table > < form > < input type = \"text\" id = \"guessInput\" placeholder = \"A0\" > < input type = \"button\" id = \"fireButton\" value = \"Fire!\" > </ form > </ div > < script src = \"battleship2.js\" ></ script > </ body > </ html > // Or JavaScript? var view = { displayMessage : function ( msg ) { var messageArea = document . getElementById ( \"messageArea\" ); messageArea . innerHTML = msg ; }, displayHit : function ( location ) { var cell = document . getElementById ( location ); cell . setAttribute ( \"class\" , \"hit\" ); }, displayMiss : function ( location ) { var cell = document . getElementById ( location ); cell . setAttribute ( \"class\" , \"miss\" ); } }; var model = { boardSize : 7 , numShips : 3 , shipLength : 3 , shipsSunk : 0 , ships : [{ locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }, { locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }, { locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }], fire : function ( guess ) { for ( var i = 0 ; i < this . numShips ; i ++ ) { var ship = this . ships [ i ]; var index = ship . locations . indexOf ( guess ); if ( index >= 0 ) { ship . hits [ index ] = \"hit\" ; view . displayHit ( guess ); view . displayMessage ( \"HIT!\" ); if ( this . isSunk ( ship )) { view . displayMessage ( \"You sank my battleship!\" ); this . shipsSunk ++ ; } return true ; } } view . displayMiss ( guess ); view . displayMessage ( \"You missed.\" ); return false ; }, isSunk : function ( ship ) { for ( var i = 0 ; i < this . shipLength ; i ++ ) { if ( ship . hits [ i ] != \"hit\" ) { return false ; } } return true ; }, generateShipLocations : function () { var locations ; for ( var i = 0 ; i < this . numShips ; i ++ ) { do { locations = this . generateShip (); } while ( this . collision ( locations )); this . ships [ i ]. locations = locations ; } }, generateShip : function () { var direction = Math . floor ( Math . random () * 2 ); var row ; var col ; if ( direction === 1 ) { row = Math . floor ( Math . random () * this . boardSize ); col = Math . floor ( Math . random () * ( this . boardSize - ( this . shipLength + 1 ))); } else { row = Math . floor ( Math . random () * ( this . boardSize - ( this . shipLength + 1 ))); col = Math . floor ( Math . random () * this . boardSize ); } var newShipLocations = []; for ( var i = 0 ; i < this . shipLength ; i ++ ) { if ( direction === 1 ) { newShipLocations . push ( row + \"\" + ( col + i )); } else { newShipLocations . push (( row + i ) + \"\" + col ); } } return newShipLocations ; }, collision : function ( locations ) { for ( var i = 0 ; i < this . numShips ; i ++ ) { var ship = this . ships [ i ]; for ( var j = 0 ; j < locations . length ; j ++ ) { if ( ship . locations . indexOf ( locations [ j ]) >= 0 ) { return true ; } } } return false ; } }; var controller = { guesses : 0 , processGuess : function ( guess ) { var location = parseGuess ( guess ); if ( location ) { this . guesses ++ ; var hit = model . fire ( location ); if ( hit && model . shipsSunk === model . numShips ) { view . displayMessage ( \"You sank all my battleships, in \" + this . guesses + \" guesses\" ); } } } } function parseGuess ( guess ) { var alphabet = [ \"A\" , \"B\" , \"C\" , \"D\" , \"E\" , \"F\" , \"G\" ]; if ( guess == null || guess . length !== 2 ) { alert ( \"Oops, please enter a letter and a number on the board.\" ); } else { var firstChar = guess . charAt ( 0 ); var row = alphabet . indexOf ( firstChar ); var column = guess . charAt ( 1 ); if ( isNaN ( row ) || isNaN ( column )) { alert ( \"Oops, that isn't on the board.\" ); } else if ( row < 0 || row >= model . boardSize || column < 0 || column >= model . boardSize ) { alert ( \"Oops, that's off the board!\" ); } else { return row + column ; } return null ; } } function init () { var fireButton = document . getElementById ( \"fireButton\" ); fireButton . onclick = handleFireButton ; var guessInput = document . getElementById ( \"guessInput\" ); guessInput . onkeypress = handleKeyPress ; model . generateShipLocations (); } window . onload = init ; function handleFireButton () { var guessInput = document . getElementById ( \"guessInput\" ); var guess = guessInput . value ; controller . processGuess ( guess ); guessInput . value = \"\" ; } function handleKeyPress ( e ) { var fireButton = document . getElementById ( \"fireButton\" ); if ( e . keyCode === 13 ) { fireButton . click (); return false ; } } /* model.fire(\"53\"); model.fire(\"06\"); model.fire(\"16\"); model.fire(\"26\"); model.fire(\"34\"); model.fire(\"24\"); model.fire(\"44\"); model.fire(\"12\"); model.fire(\"11\"); model.fire(\"10\"); */ /* console.log(parseGuess(\"A0\")); console.log(parseGuess(\"B6\")); console.log(parseGuess(\"G3\")); console.log(parseGuess(\"H0\")); console.log(parseGuess(\"A7\")); */ /* controller.processGuess(\"A0\"); controller.processGuess(\"A6\"); controller.processGuess(\"B6\"); controller.processGuess(\"C6\"); controller.processGuess(\"C4\"); controller.processGuess(\"D4\"); controller.processGuess(\"E4\"); controller.processGuess(\"B0\"); controller.processGuess(\"B1\"); controller.processGuess(\"B2\"); */ //view.displayMiss(\"00\"); //view.displayHit(\"34\"); //view.displayMiss(\"55\"); //view.displayHit(\"12\"); //view.displayMiss(\"25\"); //view.displayHit(\"26\"); //view.displayMessage(\"Tap tap, is this thing on?\"); .md-content__button { display: none; }","title":"Code tests"},{"location":"code.html#code-tests","text":"Python C++ HTML and CSS JavaScript # Finally, I can present Python code on my website. def sum ( a , b ): return a + b def sub ( a , b ): return a - b def mul ( a , b ): return a * b def div ( a , b ): return a / b a = float ( input ( 'First: ' )) b = float ( input ( 'Second: ' )) op = input ( 'Operation (sum/sub/mul/div): ' ) if op == 'sum' : print ( f 'a + b = { sum ( a , b ) } ' ) elif op == 'sub' : print ( f 'a - b = { sub ( a , b ) } ' ) elif op == 'mul' : print ( f 'a * b = { mul ( a , b ) } ' ) elif op == 'div' : print ( f 'a / b = { div ( a , b ) } ' ) else : print ( 'Invalid Operation!' ) /* How about C++? */ private void index (){ MessageBox . Show ( \"hello world\" ); } // Or HTML and CSS (with a few extra long lines of code)? <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Battleship </ title > < style > body { background-color : black ; } div # board { position : relative ; width : 1024 px ; height : 863 px ; margin : auto ; background : url ( \"board.jpg\" ) no-repeat ; } div # messageArea { position : absolute ; top : 0 px ; left : 0 px ; color : rgb ( 83 , 175 , 19 ); } table { position : absolute ; left : 173 px ; top : 98 px ; border-spacing : 0 px ; } td { width : 94 px ; height : 94 px ; } form { position : absolute ; bottom : 0 px ; right : 0 px ; padding : 15 px ; background-color : rgb ( 83 , 175 , 19 ); } form input { background-color : rgb ( 152 , 207 , 113 ); border-color : rgb ( 83 , 175 , 19 ); font-size : 1 em ; } . hit { background : url ( \"ship.png\" ) no-repeat center center ; } . miss { background : url ( \"miss.png\" ) no-repeat center center ; } </ style > </ head > </ body > < div id = \"board\" > < div id = \"messageArea\" ></ div > < table > < tr > < td id = \"00\" ></ td >< td id = \"01\" ></ td >< td id = \"02\" ></ td >< td id = \"03\" ></ td >< td id = \"04\" ></ td >< td id = \"05\" ></ td >< td id = \"06\" ></ td > </ tr > < tr > < td id = \"10\" ></ td >< td id = \"11\" ></ td >< td id = \"12\" ></ td >< td id = \"13\" ></ td >< td id = \"14\" ></ td >< td id = \"15\" ></ td >< td id = \"16\" ></ td > </ tr > < tr > < td id = \"20\" ></ td >< td id = \"21\" ></ td >< td id = \"22\" ></ td >< td id = \"23\" ></ td >< td id = \"24\" ></ td >< td id = \"25\" ></ td >< td id = \"26\" ></ td > </ tr > < tr > < td id = \"30\" ></ td >< td id = \"31\" ></ td >< td id = \"32\" ></ td >< td id = \"33\" ></ td >< td id = \"34\" ></ td >< td id = \"35\" ></ td >< td id = \"36\" ></ td > </ tr > < tr > < td id = \"40\" ></ td >< td id = \"41\" ></ td >< td id = \"42\" ></ td >< td id = \"43\" ></ td >< td id = \"44\" ></ td >< td id = \"45\" ></ td >< td id = \"46\" ></ td > </ tr > < tr > < td id = \"50\" ></ td >< td id = \"51\" ></ td >< td id = \"52\" ></ td >< td id = \"53\" ></ td >< td id = \"54\" ></ td >< td id = \"55\" ></ td >< td id = \"56\" ></ td > </ tr > < tr > < td id = \"60\" ></ td >< td id = \"61\" ></ td >< td id = \"62\" ></ td >< td id = \"63\" ></ td >< td id = \"64\" ></ td >< td id = \"65\" ></ td >< td id = \"66\" ></ td > </ tr > </ table > < form > < input type = \"text\" id = \"guessInput\" placeholder = \"A0\" > < input type = \"button\" id = \"fireButton\" value = \"Fire!\" > </ form > </ div > < script src = \"battleship2.js\" ></ script > </ body > </ html > // Or JavaScript? var view = { displayMessage : function ( msg ) { var messageArea = document . getElementById ( \"messageArea\" ); messageArea . innerHTML = msg ; }, displayHit : function ( location ) { var cell = document . getElementById ( location ); cell . setAttribute ( \"class\" , \"hit\" ); }, displayMiss : function ( location ) { var cell = document . getElementById ( location ); cell . setAttribute ( \"class\" , \"miss\" ); } }; var model = { boardSize : 7 , numShips : 3 , shipLength : 3 , shipsSunk : 0 , ships : [{ locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }, { locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }, { locations : [ 0 , 0 , 0 ], hits : [ \"\" , \"\" , \"\" ] }], fire : function ( guess ) { for ( var i = 0 ; i < this . numShips ; i ++ ) { var ship = this . ships [ i ]; var index = ship . locations . indexOf ( guess ); if ( index >= 0 ) { ship . hits [ index ] = \"hit\" ; view . displayHit ( guess ); view . displayMessage ( \"HIT!\" ); if ( this . isSunk ( ship )) { view . displayMessage ( \"You sank my battleship!\" ); this . shipsSunk ++ ; } return true ; } } view . displayMiss ( guess ); view . displayMessage ( \"You missed.\" ); return false ; }, isSunk : function ( ship ) { for ( var i = 0 ; i < this . shipLength ; i ++ ) { if ( ship . hits [ i ] != \"hit\" ) { return false ; } } return true ; }, generateShipLocations : function () { var locations ; for ( var i = 0 ; i < this . numShips ; i ++ ) { do { locations = this . generateShip (); } while ( this . collision ( locations )); this . ships [ i ]. locations = locations ; } }, generateShip : function () { var direction = Math . floor ( Math . random () * 2 ); var row ; var col ; if ( direction === 1 ) { row = Math . floor ( Math . random () * this . boardSize ); col = Math . floor ( Math . random () * ( this . boardSize - ( this . shipLength + 1 ))); } else { row = Math . floor ( Math . random () * ( this . boardSize - ( this . shipLength + 1 ))); col = Math . floor ( Math . random () * this . boardSize ); } var newShipLocations = []; for ( var i = 0 ; i < this . shipLength ; i ++ ) { if ( direction === 1 ) { newShipLocations . push ( row + \"\" + ( col + i )); } else { newShipLocations . push (( row + i ) + \"\" + col ); } } return newShipLocations ; }, collision : function ( locations ) { for ( var i = 0 ; i < this . numShips ; i ++ ) { var ship = this . ships [ i ]; for ( var j = 0 ; j < locations . length ; j ++ ) { if ( ship . locations . indexOf ( locations [ j ]) >= 0 ) { return true ; } } } return false ; } }; var controller = { guesses : 0 , processGuess : function ( guess ) { var location = parseGuess ( guess ); if ( location ) { this . guesses ++ ; var hit = model . fire ( location ); if ( hit && model . shipsSunk === model . numShips ) { view . displayMessage ( \"You sank all my battleships, in \" + this . guesses + \" guesses\" ); } } } } function parseGuess ( guess ) { var alphabet = [ \"A\" , \"B\" , \"C\" , \"D\" , \"E\" , \"F\" , \"G\" ]; if ( guess == null || guess . length !== 2 ) { alert ( \"Oops, please enter a letter and a number on the board.\" ); } else { var firstChar = guess . charAt ( 0 ); var row = alphabet . indexOf ( firstChar ); var column = guess . charAt ( 1 ); if ( isNaN ( row ) || isNaN ( column )) { alert ( \"Oops, that isn't on the board.\" ); } else if ( row < 0 || row >= model . boardSize || column < 0 || column >= model . boardSize ) { alert ( \"Oops, that's off the board!\" ); } else { return row + column ; } return null ; } } function init () { var fireButton = document . getElementById ( \"fireButton\" ); fireButton . onclick = handleFireButton ; var guessInput = document . getElementById ( \"guessInput\" ); guessInput . onkeypress = handleKeyPress ; model . generateShipLocations (); } window . onload = init ; function handleFireButton () { var guessInput = document . getElementById ( \"guessInput\" ); var guess = guessInput . value ; controller . processGuess ( guess ); guessInput . value = \"\" ; } function handleKeyPress ( e ) { var fireButton = document . getElementById ( \"fireButton\" ); if ( e . keyCode === 13 ) { fireButton . click (); return false ; } } /* model.fire(\"53\"); model.fire(\"06\"); model.fire(\"16\"); model.fire(\"26\"); model.fire(\"34\"); model.fire(\"24\"); model.fire(\"44\"); model.fire(\"12\"); model.fire(\"11\"); model.fire(\"10\"); */ /* console.log(parseGuess(\"A0\")); console.log(parseGuess(\"B6\")); console.log(parseGuess(\"G3\")); console.log(parseGuess(\"H0\")); console.log(parseGuess(\"A7\")); */ /* controller.processGuess(\"A0\"); controller.processGuess(\"A6\"); controller.processGuess(\"B6\"); controller.processGuess(\"C6\"); controller.processGuess(\"C4\"); controller.processGuess(\"D4\"); controller.processGuess(\"E4\"); controller.processGuess(\"B0\"); controller.processGuess(\"B1\"); controller.processGuess(\"B2\"); */ //view.displayMiss(\"00\"); //view.displayHit(\"34\"); //view.displayMiss(\"55\"); //view.displayHit(\"12\"); //view.displayMiss(\"25\"); //view.displayHit(\"26\"); //view.displayMessage(\"Tap tap, is this thing on?\"); .md-content__button { display: none; }","title":"Code tests"},{"location":"robot_spiral_1.html","text":"Robot spiral 1 I tried to setup Johnny-Five but it didn't work. I tried to make a Python GUI using this tutorial but that didn't work. This tutorial for making a Python script turn an Arduino LED on and off worked! https://pythonforundergradengineers.com/python-arduino-LED.html .md-content__button { display: none; }","title":"Robot notes"},{"location":"robot_spiral_1.html#robot-spiral-1","text":"I tried to setup Johnny-Five but it didn't work. I tried to make a Python GUI using this tutorial but that didn't work. This tutorial for making a Python script turn an Arduino LED on and off worked! https://pythonforundergradengineers.com/python-arduino-LED.html .md-content__button { display: none; }","title":"Robot spiral 1"},{"location":"seeed.html","text":"My experience with Seeed Studio My name is Svavar Konr\u00e1\u00f0sson and I work at Fab Lab \u00cdsafj\u00f6r\u00f0ur , Iceland. Fab Academy I took part in the Fab Academy in 2023 and I have to say, the experience changed me for the better. I no longer feel intimidated by any technology, and my project management skills have improved. The Fab Academy is taught remotely by Professor Neil Gershenfeld, director of the MIT Center for Bits and Atoms. Neil is the originator of the Fab Lab movement. My local instructor at our lab was the multi-talented \u00de\u00f3rarinn Bjartur Brei\u00f0fj\u00f6r\u00f0 Gunnarsson , director of Fab Lab \u00cdsafj\u00f6r\u00f0ur. The evolution of my electronics design skills over the course of the Fab Academy. The course puts a heavy emphasis on digital electronics, because that's what makes things come alive! You'll notice Xiao modules being heavily used throughout my electronics work. They are recommended by the Fab Academy, which has traditionally only used bare microcontrollers. The Xiao modules are incredibly handy, since I can put pin headers on them and try things out on a breadboard, and then embed them in my own custom circuits. They have a built-in USB-C connector (it's not easy to mill the pads for those connectors) and an RGB LED which I've used to confirm that my PWM motor control code is working (see here ). If I want good analog peripherals to connect to sensors (like in my IR sensor and my Baksi sensing board ), I'll use the Xiao SAMD21, if I want raw processing power, I'll use the Xiao RP2040 and if I want WiFi networking I'll grab the Xiao ESP32. And more Xiaos have been added; it would be fun to try a bit of machine learning on a microcontroller module. Here's the concept sketch of my Fab Academy final project, a tiny and simple educational robot arm made only of motors and PCBs: Baksi (I added the \"i\" at the end because my son always calls it Baksi) is the noun version of the Icelandic verb baksa, which means to 'busy oneself' or to 'be industrious', usually in the context of toddlers playing energetically outside, digging and dragging logs about and throwing rocks. Here's a video where I describe the final project to Neil Gershenfeld during random review. A bit of history I backed the original uArm on Kickstarter and enjoyed using it until I accidentally connected the power supply directly to the Arduino instead to the uArm Shield. The plan was to have it fry doughnuts and frost them but the arm ended up getting fried instead. The software part also intimidated me. In one of the courses in my Mechanical Engineering degree, the task was to pick up a wine glass and give the professor a sip. The rationale behind it was to think about solutions for people with Parkinson's disease. My group put a lot of work into making a robot arm with a soft 3D printed hand that I found on Thingiverse. We converted an old theatre light (if you find one, they're a treasure trove, this one had 13 stepper motors). I designed and 3D printed all the custom components and the arm worked . But then I wanted an arm that can do more than one thing. When Fab Lab \u00cdsafj\u00f6r\u00f0ur needed something to impress the President of Iceland and the First Lady, Kar\u00edtas at Fab Lab Sau\u00f0\u00e1rkr\u00f3kur was kind enough to loan us a Niryo One , a 3D printed educational robot arm based on steppers and Dynamixel servos. I programmed the robot to hand the First Lady a laser cut business card , and had great fun experimenting with the robot. Then I fried one of its servo motors when a cable connector got stuck and the robot kept trying to move to its intended position. I managed to swap out the motor, but I thought that surely there's an improvement to be made here. Since educational robot arms seem to be mostly used to move colored cubes around, I think it's OK to scale them down and simplify them to make them less expensive and more accessible. I'd like to base my arm on brushless motors without any gearing, and use springs to balance it, just like the Anglepoise lamp . Then it's nimble and can't damage anything. It won't be able to lift much, but that's OK! I only want it to lift a paint brush or a colored cube. Outline of the idea Since I have a history of frying robot arms, I have a few personal design goals for my arm. Cannot hurt itself or the user Easily programmed by moving the arm and saving key points and paths Small Cheap Precise enough to paint candles for a local company :) I present Baksi the educational robot! I ended up changing to a SCARA design, since it doesn't stress the motors as much. I also 3D printed a part to put underneath each PCB to stiffen it and hide a bunch of wires. Here's my fun 1 minute final project video, showcasing Baksi the robot: I'd love to show Baksi the robot arm at Maker Faire Shenzen and discuss how to adapt the design for manufacturing. I'm planning to have Seeed Studio fabricate the boards for the next version of the Baksi robot arm. That version will be made of motors and PCBs and nothing else! A professionally produced FR4 PCB will be much stiffer than the FR1 boards that I milled, and when I order them from Seeed Studio I can use multiple layers to route all the wires that I need. I've checked, and the main parts (MCU and motor driver) are available in the Seeed Studio part catalogue. I also think Grove connectors for the motors and encoders would be really nice. If there's interest, it would be exciting to also try to sell the robot as a kit in the Seeed Studio store. I really want to take this robot all the way to market, so that it can be used to teach electronics, robotics and programming in a fun and engaging way. I even got a friend of mine to make a GUI for Baksi . Exciting times ahead! My first circuit I designed my first electronic circuit in January 2023. It was a Xiao RP2040, a button and a blue LED with a current-limiting resistor. I calculated the correct value for the resistor, opened up KiCAD for the first time, watched a few tutorials and then exported the design as an SVG file. I edited the design in Inkscape and cut it out of some adhesive-backed copper sheet and glued it to a laser cut plate. I tried my hand at soldering the SMD components (the Xiao was easy to solder) and then it was time for the moment of truth. I loaded the Blink example sketch onto the Xiao and my blue LED blinked! I was so happy! Here I've programmed the button to turn on the LED: IR sensor board I used the IR phototransistor from the fab library twice, to represent both the IR emitter and the phototransistor. For this board I'm using obsolete parts from the 2012 Fab Lab inventory that still work really well; the OP280KT IR emitter and the matched OP580 phototransistor. They are have a more square shape than their modern counterparts, but I checked the datasheets and their footprints are close enough to what I have in the KiCAD library now. My Xiao IR sensor schematic. I looked at the phototransistor board on the Xiao page of the Fab Academy web site of Adrian Torres . It has a 1kOhm resistor on the IR emitter diode and a 10kOhm resistor on the IR sensor. I did the same here. My Xiao PCB design for the IR emitter and sensor. Instead of soldering the Xiao onto the board I'm using pin sockets. The milling went well using Fab Modules and the Roland Modela MDX-20, but the edges of the traces are a little bit rough. That's a sign of wear on the 1/64 inch bit. Milling the traces of the IR sensor board. Then I milled the board outline with the 1/32 inch bit. Milling the outline of the IR sensor board. Here's how the board looks: The IR sensor board. With the Xiao SAMD21 on board. Here's a video of the sensor readings, it works really well: Measuring the analog signal I connected the signal from the IR sensor to the oscilloscope and got a reading that changed with the light hitting the sensor: Design files I used code from Adrian Torres to get readings in the serial plotter, but I changed the number of the analog read pin to A10. Here's my KiCAD project: Download Xiao IR sensor board And the PCB milling files for Fab Modules or Mods: The traces. The interior (for milling the board outline). And the Arduino code: Download IR sensor Arduino code Visualizing the light readings I experimented with creating a computer interface for the light sensor. The code that runs on the Xiao is very simple. It comes from Adri\u00e1n Torres. The code uses analogRead to read the value from the IR sensor and then writes it to the serial port: I used a few different Python scripts to receive the IR light values from the serial port. First I tried Neil Gershenfeld's hello.light.45.py code but it reads single characters from the serial port and I had programmed the Xiao to send whole lines at a time. I stopped there with Neil's code. Then I found a nice tutorial showing how you can list the available COM devices in the terminal, pick one by typing its number, and open it using serial.tools. Once the serial port is open, I run an infinite while loop and read one line from the serial port at a time, decode it using UTF-8 character encoding and then turn that string into an integer. I do the reading and converting in only two lines of Python code: packet = serialInst . readline () y = int ( packet . decode ( 'utf' )) Then, to get a very rudimentary graphical representation going, I use an if statement and display one - if the value is between 0 and 100, display -- if the value is between 100 and 200 and so on, up to 1000 ( ---------- ). As simple as it gets. This barely counts as a graphical user interface. I also tried to make a GUI using Tkinter. I found a useful code snippet in example 1 in this tutorial , which creates a small GUI window and displays a title and a red and green rectangle with empty space between them. It's static, but by using my y variable (the number that is streaming into the serial port) instead of hardcoded numbers, I can make the bar move. The static GUI example. I could get the Tkinter interface to run separately and I could also get a stream of data from the IR sensor separately, but I had trouble combining them. Apparently, the reason is that I have two infinite while loops and the one that comes first in the code blocks the other. While the code waits for input from the serial port, nothing else can happen. And while the interface is running, nothing else can happen. I couldn't figure this out using the examples that I found online. The following day I gave up and asked ChatGPT to change the code to make the two loops run concurrently. That resulted in code that ran, but I needed to make some changes to it. Only the grey bar was changing size between 0 and 1000 pixels, so I put 1000-y as the width of the black bar. That worked nicely. The interface was also sluggish, but I fixed that by changing root.after(100, readFromSerial) to root.after(10, readFromSerial) . Then there is a much shorter delay for updating the interface. We have a GUI that runs smoothly. Design files Download IR sensor Arduino code Download Python terminal visualization code Download Python GUI code The tea machine My next major step was a machine control board for the machine building group project. We made a tea-steeping machine. The clean aesthetics of the machine are thanks to Hafey , who designed and made the structure on the Shopbot and the laser cutter. She also made the logo on the vinyl cutter, which means that we used all the machines in the Fab Lab! The Icelandic Machine Week team: Svavar, Andri and Hafey. In the Fab Academy, we talk about spiral development. The trick to developing a working product is to make a very rough version the whole thing (instead of perfecting a small part of it) and then doing another spiral to fix bugs and add features, and so on as long as you have time. Machine controller spiral 1 Machine control spiral 1: An L298N stepper driver module on a breadboard with a SparkFun RedBoard, which is essentially the same thing as an Arduino Uno. Machine controller spiral 2 The second spiral was to make a custom board with a Xiao RP2040 microcontroller module, a DRV8825 StepStick motor controller, 12V input pins from a lab power supply and GPIO breakout pins for a servo and two buttons. In Machine Week I made my biggest leap forward in electronics design. I also developed my methodical method of breadboarding and testing the hardware and software, one element at a time, before transferring the design over to KiCAD. The custom board that I made is an extension of spiral 2. The first board had mounting holes that were far too big and the board also came loose during milling. Bad board and good board. I input a radius for the mounting holes when I thought I was defining their diameter. So the holes are huge on the board on the left! And I didn't use enough double-sided tape to secure the PCB blank, so it shifted during the trace milling operation. After a redesign, the second attempt to mill the board went well. The board on the right is the final version of the TeaManator controller board. I forgot the drilling holes for the electrolytic bulk storage capacitor for the stepper driver, so I drilled those holes afterwards. Hand drilling the last two holes in the board. I only had through-hole female headers, so I bent their legs in order to be able to surface mount them. Bending the legs for surface mounting. The final TeaManator machine controller. I learned a lesson in considering which side through-hole components need to be on in order to touch the copper traces. Close-up of the machine controller, all connected up. The TeaManator 2000 tea steeping machine. Clean and elegant. The reality behind the facade. The USB hub (with AC adapter) and the big power supply are only there to supply 5V to the Xiao and 12V to the stepper driver, because we didn't have time to learn how to make a power supply. I realized then that I need to think seriously about a neat way to power my final project. Machine controller spiral 3 (not my work) The first Stepper Modular Thing that Andri made. He had to do considerable editing to make the circuit fabricatable. After 3D printing all the parts for the linear motion axis , Andri worked tirelessly on the third spiral, which was to make a Modular Things stepper controller board . We were really excited about this solution, but this design really thin traces and two layers, making it difficult to make. Andri made lots of modifications to the design in Fusion 360 in order to make the traces thicker and reroute everything so that it fit on one layer. He successfully milled the board and soldered all the components to it, but it didn't work. Unfortunately, the motor drivers in the original design need a higher voltage than 5V to work. The designer, Quentin Bols\u00e9e was very responsive to our questions. Then our instructors \u00c1rni and \u00de\u00f3rarinn(https://fabacademy.org/archives/2015/eu/students/gunnarsson.thorarinn_b.b/index.html), recalled that Yuichi Tamiya at Fab Lab Kannai made a working version of the Modular Things stepper control board at the 2023 instructor bootcamp in Amsterdam. Andri proceeded to make the board and \u00c1rni soldered the components onto it. It worked on the first try! The second Stepper Modular Thing that Andri made. Wow! It's powered by the USB port! We didn't have time to integrate it into our machine, but I'm very glad that Andri and our instructors were able to make a working Modular Thing. Seeing the Stepper Modular Thing working and being able to make the machine control board successfully combined to give me the confidence to try to make a robot arm joint immediately when I arrived back in \u00cdsafj\u00f6r\u00f0ur. Our instructors We are lucky to have these instructors. Here are some images to prove it: Left: \u00de\u00f3rarinn explaining some electronics to Hafey. Right: Andri showing \u00c1rni the teabag holder that he made from bent acrylic. Attention: Coffee for Svavar! Our instructors took good care of us during this intense work session. My instructor \u00de\u00f3rarinn also disassembled a stepper motor and showed us how it works: Left: The stepper rotor, with its many iron teeth visible. Right: The step signal that turns the rotor (two of the phases are connected to the oscilloscope). My final project Final project spiral 1 After Machine Week, I tried making Yuichi Tamiya's Modular Things stepper board . Yuichi Tamiya's Modular Things stepper board from the 2023 instructor bootcamp in Amsterdam. This is the last board that Andri made in Machine week with the help of our instructors. It worked, so immediately after I got back to \u00cdsafj\u00f6r\u00f0ur I made one of my own: OMG, it's so smooth and quiet! \u00de\u00f3rarinn found me all excited when he came to work. Fig rolls and the trusty Tandy 102 by my side, and a candle lit on my desk to keep my father with me as I work. He would have loved this. Design file Download Stepper H-bridge RP2040 Modular Thing Arduino code Download svavar-stepper.js Spiral 1 3D design I was so excited to see a motor moving that I immediately started to design 3D printed parts for spiral 1 of my robot arm. I bought two sizes of brushless motors, thinking that I would use a bigger motor in the base. I based the shape of the board on that. A few days after I designed the shape, I decided to change the orientation of the arm from vertical (regular robot arm) to horizontal (SCARA arm). Then there's no strain on the motors when the arm is stationary and I don't need to use the bigger and more expensive brushless motor. I also decided to keep the stepper in the base, not because I wanted to use a stepper but simply because I had a working stepper. Spiral development! This Fusion 360 model is named stepper_festing, which means stepper_bracket. I only meant to design a fixture for the stepper, but it quickly turned into a whole robot arm. Assembling spiral 1 of my robot arm. Robot base The 3D printed base for spiral 1 of my robot arm. The support material came easily away from the part in one piece. Neat! Here's the Stepper RP2040 Modular Thing that I made for the stepper in the base of the arm. Look closely and you'll see the tiny white TPU washers that I made avoid making contact between the screws and the traces. Spiral 1 assembly Robot arm spiral 1. Design file Download robot arm spiral 1 Fusion 360 model My PCB design I heavily modified Yuichi's board, changing the shape and adding header pins, so that I could use all the Xiao RP2040's pins. I can now connect the brushless motor to the two H-bridges (it needs one and a half H-bridge) and I can connect the encoder to 3.3 V, ground and a digital pin on the Xiao. Trying the Autorouter in Fusion360. I ended up switching to KiCAD and routing everything manually. My robot joint v1 PCB. I also added one header pin to the current sense resistor, hoping that I can read the current going into the motor. That would be very useful, because it's a way to prevent the H-bridges from overheating (I burned a motor driver on a commercial robot arm once and I want to make it impossible on my arm) and I can also use the measured current as a way to measure the force on the joint. Current sensing is not available on any hobby robot that I know of, so if this works, then it will be a great feature! I also added a 7-11V power input for the brushless motor. Yuichi's stepper board uses the 5V USB pin to power the stepper, but my brushless motor needs a higher voltage. I will just be using a lab power supply for now. I will figure out the arm's power supply later. Does it make sense to add a boost converter? I don't know, converting 230V AC into 5V and then converting 5V into 11V sounds a bit messy to me. Design files Download Robot joint v1 KiCAD project Putting Dupont connectors on the motor The power connector that came with the motor is too small for the standard 2.54 mm pin headers in the Fab Lab Inventory, so my instructor \u00de\u00f3rarinn showed me how to crimp Dupont connectors onto the wires. Part 1 Part 2 Part 3 Part 4 Part 5 Small connector. \u00de\u00f3rarinn's Dupont connector kit. Aligning a female Dupont connector to the wire. The first crimp connection grabs the plastic cover and the second one grabs the bare wire and secures an electrical connection. Crimping the connector onto the wire. More recently I've started to use narrow nose pliers instead. Then I can control exactly how the crimping goes and I don't waste as many Dupont connectors. Triple Dupont connector, ready for service. PCB production Under number of offsets (off screen) I typed -1, to have the milling machine clear all the excess copper off the board. I thought this was the safest move, since I'll be putting a BLDC motor with an aluminum chassis onto the board. That's a nice-looking board. The components for arm joint v1, with a general comment on component labeling. Scaling problem The holes for the brushless motor screws were too far apart. How could that be? I exported the arm profile with the holes directly to DXF from Fusion 360, imported them into KiCAD and then exported to SVG without modifications. My instructor \u00de\u00f3rarinn suggested that my DPI settings in Inkscape and Fab Modules might be off. If you check the Fab Modules image, you'll see that the resolution was automatically set to 999.99 dots per inch, instead of 1000. Oh no, torn motor pins! I tore the motor pins off the board when I was trying to insert the connector. The copper also came off the board. This was a design lesson: you have to put the connectors all the way at the edge of the board! I don't know what I was thinking. This was very frustrating. I had to stop working, cool off and come back the next day. With a level head, I thought that I might actually be able to save this board using the adhesive-backed copper sheet that I use on the vinyl cutter. The fix Part 1 Part 2 Part 3 Part 4 Part 5 First I cut the MOTOR OUTPUT and CURRENT SENSE letters off the board with a box cutter. Then I tried cutting a strip of copper sheet and I successfully glued it onto the board. Copper sheet added for the other three motor phases. Then I carefully soldered the horizontal header pins onto the copper sheet and made a solder bridge from the sheets to the traces on the board. Finally I added some hot glue to add a little bit of strength. Stepper control with my board Driving a stepper from the Modular Things web interface using my arm joint control board. When testing my arm joint v1 with a stepper motor, I accidentally ripped the stepper motor pin header off the board and took some of the traces along with it. A current sense header pin also fell off the board. I decied to call it quits with making stuff for the day, went to the Heimabygg\u00f0 coffee house and wrote up my experiences. With fresh eyes (and a fresh espresso) at the lab the next morning, I thought of a way to fix the board. I would cut strips of adhesive-backed copper sheet and glue new traces onto the board. I soldered them to the remains of the old traces on one end and to the header pins on the other end, and after a bit of troubleshooting, the board worked! I've tried 247, 427, 274, 472, 742, 724 - that covers all possible $3! = 6$ combinations. I'm getting PWM output on Xiao pins 0, 2 and 4. Now I know that the right pins are 7, 2 and 4. I get good PWM output for the motor from pins 2 and 4 but I get the strange sawtooth output from pin 7. Design files Download Stepper H-bridge RP2040 Arduino code Download Svavar stepper Modular Things JavaScript code LED PWM test Before trying to move the brushless motor, I checked whether I was getting a sinusoidal PWM on three output pins. I did this by outputting the motor control signals to the RGB LED that is built into the Xiao RP2040 board. I used Adrian's pinout image of the Xiao RP2040 many, many times because it contains the Arduino pin numbers: This image has been a very useful reference. To make the sinusoidal PWM motor control signals go to the RGB LED, I defined pins 17, 16 and 25 as the output pins. Seems to be working! Design file Download sinusoidal PWM for RGB LED Arduino code BLDC control with my board Here I'm controlling the BLDC with sinusoidal PWM signals: Getting some erratic behavior. This same code worked with the L298N stepper driver. After trying a few different speeds and voltages, I finally got the motor to spin around in circles in the last shot. Design files Download sinusoidal L298N brushless control Arduino code Debugging The brushless motor moved erratically no matter what I tried. I wondered if I had soldered the wrong capacitors onto the board. I tried to measure them with a component tester: Trying to measure a capacitor with a component tester. I couldn't get a reading with the component tester. Eventually I decided that I must have put the right capacitors on the board because I was so systematic and methodical in soldering the board. Finally, I tried lowering the power supply voltage to 5V. The motor still worked. Then I switched the motor over to Yuichi's Modular Things stepper driver and found erratic behavior there too. It seems that this Toshiba motor driver just doesn't cut it. I then connected the motor to the ancient L298N double H-bridge and it worked! OK, so the Toshiba H-bridge is out and I need to look for an alternative. Looking at the signals from the H-bridges. The board can control a stepper just fine. When trying to control a brushless motor, one H-bridge is a problem. It's the one that has only one pin connected. It seems that these motor drivers don't have independent half-H-bridges, which is what I need for brushless motor control. I'm going to abandon this board. I also noticed a lot of compliance in the structure. It seems to stem mostly from the stepper coupling that I designed. This is something I can improve in the next spiral. See the arm bending here: Final project spiral 2 Basic shape study Basic shape study. Since the arm is made of flat PCBs, I don't have many parameters to play with. Dimensions of the basic shape. I set the diameter of all the arcs to d3 , which is the diameter of the first arc. I change that and the whole model updates. I eventually decided to make all the joints the same shape, because it's simpler and because when the big arcs go inward, there isn't enough room on the board for all the components. So here's the final 3D design: Here's baksi, the spiral 2 version. Design files Download baksi spiral 2 concept Fusion 360 model Download 3D print with internal channels Download base Electronics design I swapped out the Xiao SAMD21 for the bare SAMD21 microcontroller. I made this design spiral in the Fab Lab and I'm planning to have Seeed Studio make the boards for design spiral 3. The baksi robot joint schematic. The baksi robot joint PCB layout. PCB production My first attempt at milling the PCB failed, and I broke the smallest end mill (the 0.01\" one). I only have one left now. Looking back, I made the fundamental mistake of not making a small test of the most challenging aspect of the process. Then I tried a V-bit: The moment I realized that I could finish my Fab Academy final project. I went to the video conferencing screen in the lab with my hands up in victory, and they guys celebrated with me. Look at those beautiful traces. When soldering the teeny tiny DRV8313 motor driver onto my beautiful board, I found that its legs are very thin and flexible, and so when you've fastened the driver to the big ground plane with a heat gun, you can bend the legs into place, as long as they're close to their intended copper pad. After soldering, I successfully put the bootloader on the SAMD21 chip and then programmed it with the SimpleFOC code. But I got no reading from the magnetic angle sensor and the serial monitor said that it detected no movement from the motor. The motor sounded weird. Design files Download baks KiCAD project Download baks_joint2_traces.png Download baks_joint2_traces_exterior.png Download baks_joint2_holes_interior.png Sensing board I also made a sensing board for Baksi. It contains an endstop button for the Z-axis as well as a capacitive step-response proximity sensor, so that it can sense when a human gets too close, and stop moving. It has a Xiao SAMD21. I had a little trouble finding the right pin names for the Seeeduino Xiao SAMD21. In the first place, when I first connected it, it was set up as a Seeeduino Femto. I couldn't find much info on that online. I tried uploading an Arduino sketch to it as a Seeduino Xiao SAMD21, but it got bricked and didn't show up on my computer anymore. Not in the Arduino IDE and not in Device Manager either. After a bit of Googling I found the solution to this problem. I shorted the connection between the RESET pads on one side of the Xiao's USB connector and it immediately appeared on my computer as a UF2 drive. I then tried uploading the same Arduino sketch to it as a Xiao Femto, and it worked. But what's the pinout of the Xiao Femto? I tried the Xiao SAMD21 pin numbers but they didn't work. I also tried my Blink all pins sketch, where I make every pin from 0 to 40 blink once and write its number to the serial monitor at the same time. I connected each pin to an LED to discover the pin numbers. But now the problem was that after uploading, the device disappeared and so I couldn't get data from it through the serial port. So I tried blinking the LED as many times as the number of the pin that I was testing, After a good wait, I counted twelve blinks on my red LED. Alright. I connected every pin to an LED using my LED debugging board and was able to get the pinout of the Xiao Femto. Final project presentation Presentation slide. 1 minute presentation video. Here I am presenting my final project to Professor Neil Gershenfeld and the instructors and students in the 2023 Fab Academy cycle. Link to the video. As for the outcome of the final project: I love how you can see all the electronic components and yet the robot has a clean look and all the wires are hidden. All of them! That took a LOT of system integration work. The robot actually looks pretty much exactly like I envisioned it. However, assembling the robot was hell. Wires kept breaking and it was difficult to get them into the 3D printed part. I wouldn't want to do it like this again. This was spiral 2. In spiral 3, I want to design a multilayer PCB that contains all the wires that are currently hidden inside the 3D printed part. Then I can realize my original vision of a robot that is made of motors and PCB and nothing else! And it will still have a clean look! Baksi software After the Fab Academy, I received a grant from the Icelandic government to hire a university student to make a graphical user interface to control Baksi the robot. Here is the resulting software, written in Python: Version 1 of the Baksi GUI. The software was written by Gu\u00f0j\u00f3n Bergmann, who is studying Aerospace Engineering at TU Delft. We've made a robot together before . Gu\u00f0j\u00f3n Bergmann. I look forward to continuing the project with the help of Seeed Studio. I'm excited to get professionally manufactured (and perhaps also assembled) boards. It may also be useful to order a few precision 3D printed parts and CNC milled aluminum brackets for the Z-axis motors. I need to do a fair bit of customizing to make an improved, clean-looking Z-axis. Coming soon! (I have higher resolution images and videos if you want.)","title":"Seeed"},{"location":"seeed.html#my-experience-with-seeed-studio","text":"My name is Svavar Konr\u00e1\u00f0sson and I work at Fab Lab \u00cdsafj\u00f6r\u00f0ur , Iceland.","title":"My experience with Seeed Studio"},{"location":"seeed.html#fab-academy","text":"I took part in the Fab Academy in 2023 and I have to say, the experience changed me for the better. I no longer feel intimidated by any technology, and my project management skills have improved. The Fab Academy is taught remotely by Professor Neil Gershenfeld, director of the MIT Center for Bits and Atoms. Neil is the originator of the Fab Lab movement. My local instructor at our lab was the multi-talented \u00de\u00f3rarinn Bjartur Brei\u00f0fj\u00f6r\u00f0 Gunnarsson , director of Fab Lab \u00cdsafj\u00f6r\u00f0ur. The evolution of my electronics design skills over the course of the Fab Academy. The course puts a heavy emphasis on digital electronics, because that's what makes things come alive! You'll notice Xiao modules being heavily used throughout my electronics work. They are recommended by the Fab Academy, which has traditionally only used bare microcontrollers. The Xiao modules are incredibly handy, since I can put pin headers on them and try things out on a breadboard, and then embed them in my own custom circuits. They have a built-in USB-C connector (it's not easy to mill the pads for those connectors) and an RGB LED which I've used to confirm that my PWM motor control code is working (see here ). If I want good analog peripherals to connect to sensors (like in my IR sensor and my Baksi sensing board ), I'll use the Xiao SAMD21, if I want raw processing power, I'll use the Xiao RP2040 and if I want WiFi networking I'll grab the Xiao ESP32. And more Xiaos have been added; it would be fun to try a bit of machine learning on a microcontroller module. Here's the concept sketch of my Fab Academy final project, a tiny and simple educational robot arm made only of motors and PCBs: Baksi (I added the \"i\" at the end because my son always calls it Baksi) is the noun version of the Icelandic verb baksa, which means to 'busy oneself' or to 'be industrious', usually in the context of toddlers playing energetically outside, digging and dragging logs about and throwing rocks. Here's a video where I describe the final project to Neil Gershenfeld during random review.","title":"Fab Academy"},{"location":"seeed.html#a-bit-of-history","text":"I backed the original uArm on Kickstarter and enjoyed using it until I accidentally connected the power supply directly to the Arduino instead to the uArm Shield. The plan was to have it fry doughnuts and frost them but the arm ended up getting fried instead. The software part also intimidated me. In one of the courses in my Mechanical Engineering degree, the task was to pick up a wine glass and give the professor a sip. The rationale behind it was to think about solutions for people with Parkinson's disease. My group put a lot of work into making a robot arm with a soft 3D printed hand that I found on Thingiverse. We converted an old theatre light (if you find one, they're a treasure trove, this one had 13 stepper motors). I designed and 3D printed all the custom components and the arm worked . But then I wanted an arm that can do more than one thing. When Fab Lab \u00cdsafj\u00f6r\u00f0ur needed something to impress the President of Iceland and the First Lady, Kar\u00edtas at Fab Lab Sau\u00f0\u00e1rkr\u00f3kur was kind enough to loan us a Niryo One , a 3D printed educational robot arm based on steppers and Dynamixel servos. I programmed the robot to hand the First Lady a laser cut business card , and had great fun experimenting with the robot. Then I fried one of its servo motors when a cable connector got stuck and the robot kept trying to move to its intended position. I managed to swap out the motor, but I thought that surely there's an improvement to be made here. Since educational robot arms seem to be mostly used to move colored cubes around, I think it's OK to scale them down and simplify them to make them less expensive and more accessible. I'd like to base my arm on brushless motors without any gearing, and use springs to balance it, just like the Anglepoise lamp . Then it's nimble and can't damage anything. It won't be able to lift much, but that's OK! I only want it to lift a paint brush or a colored cube.","title":"A bit of history"},{"location":"seeed.html#outline-of-the-idea","text":"Since I have a history of frying robot arms, I have a few personal design goals for my arm. Cannot hurt itself or the user Easily programmed by moving the arm and saving key points and paths Small Cheap Precise enough to paint candles for a local company :)","title":"Outline of the idea"},{"location":"seeed.html#i-present-baksi-the-educational-robot","text":"I ended up changing to a SCARA design, since it doesn't stress the motors as much. I also 3D printed a part to put underneath each PCB to stiffen it and hide a bunch of wires. Here's my fun 1 minute final project video, showcasing Baksi the robot: I'd love to show Baksi the robot arm at Maker Faire Shenzen and discuss how to adapt the design for manufacturing. I'm planning to have Seeed Studio fabricate the boards for the next version of the Baksi robot arm. That version will be made of motors and PCBs and nothing else! A professionally produced FR4 PCB will be much stiffer than the FR1 boards that I milled, and when I order them from Seeed Studio I can use multiple layers to route all the wires that I need. I've checked, and the main parts (MCU and motor driver) are available in the Seeed Studio part catalogue. I also think Grove connectors for the motors and encoders would be really nice. If there's interest, it would be exciting to also try to sell the robot as a kit in the Seeed Studio store. I really want to take this robot all the way to market, so that it can be used to teach electronics, robotics and programming in a fun and engaging way. I even got a friend of mine to make a GUI for Baksi . Exciting times ahead!","title":"I present Baksi the educational robot!"},{"location":"seeed.html#my-first-circuit","text":"I designed my first electronic circuit in January 2023. It was a Xiao RP2040, a button and a blue LED with a current-limiting resistor. I calculated the correct value for the resistor, opened up KiCAD for the first time, watched a few tutorials and then exported the design as an SVG file. I edited the design in Inkscape and cut it out of some adhesive-backed copper sheet and glued it to a laser cut plate. I tried my hand at soldering the SMD components (the Xiao was easy to solder) and then it was time for the moment of truth. I loaded the Blink example sketch onto the Xiao and my blue LED blinked! I was so happy! Here I've programmed the button to turn on the LED:","title":"My first circuit"},{"location":"seeed.html#ir-sensor-board","text":"I used the IR phototransistor from the fab library twice, to represent both the IR emitter and the phototransistor. For this board I'm using obsolete parts from the 2012 Fab Lab inventory that still work really well; the OP280KT IR emitter and the matched OP580 phototransistor. They are have a more square shape than their modern counterparts, but I checked the datasheets and their footprints are close enough to what I have in the KiCAD library now. My Xiao IR sensor schematic. I looked at the phototransistor board on the Xiao page of the Fab Academy web site of Adrian Torres . It has a 1kOhm resistor on the IR emitter diode and a 10kOhm resistor on the IR sensor. I did the same here. My Xiao PCB design for the IR emitter and sensor. Instead of soldering the Xiao onto the board I'm using pin sockets. The milling went well using Fab Modules and the Roland Modela MDX-20, but the edges of the traces are a little bit rough. That's a sign of wear on the 1/64 inch bit. Milling the traces of the IR sensor board. Then I milled the board outline with the 1/32 inch bit. Milling the outline of the IR sensor board. Here's how the board looks: The IR sensor board. With the Xiao SAMD21 on board. Here's a video of the sensor readings, it works really well:","title":"IR sensor board"},{"location":"seeed.html#measuring-the-analog-signal","text":"I connected the signal from the IR sensor to the oscilloscope and got a reading that changed with the light hitting the sensor:","title":"Measuring the analog signal"},{"location":"seeed.html#design-files","text":"I used code from Adrian Torres to get readings in the serial plotter, but I changed the number of the analog read pin to A10. Here's my KiCAD project: Download Xiao IR sensor board And the PCB milling files for Fab Modules or Mods: The traces. The interior (for milling the board outline). And the Arduino code: Download IR sensor Arduino code","title":"Design files"},{"location":"seeed.html#visualizing-the-light-readings","text":"I experimented with creating a computer interface for the light sensor. The code that runs on the Xiao is very simple. It comes from Adri\u00e1n Torres. The code uses analogRead to read the value from the IR sensor and then writes it to the serial port: I used a few different Python scripts to receive the IR light values from the serial port. First I tried Neil Gershenfeld's hello.light.45.py code but it reads single characters from the serial port and I had programmed the Xiao to send whole lines at a time. I stopped there with Neil's code. Then I found a nice tutorial showing how you can list the available COM devices in the terminal, pick one by typing its number, and open it using serial.tools. Once the serial port is open, I run an infinite while loop and read one line from the serial port at a time, decode it using UTF-8 character encoding and then turn that string into an integer. I do the reading and converting in only two lines of Python code: packet = serialInst . readline () y = int ( packet . decode ( 'utf' )) Then, to get a very rudimentary graphical representation going, I use an if statement and display one - if the value is between 0 and 100, display -- if the value is between 100 and 200 and so on, up to 1000 ( ---------- ). As simple as it gets. This barely counts as a graphical user interface. I also tried to make a GUI using Tkinter. I found a useful code snippet in example 1 in this tutorial , which creates a small GUI window and displays a title and a red and green rectangle with empty space between them. It's static, but by using my y variable (the number that is streaming into the serial port) instead of hardcoded numbers, I can make the bar move. The static GUI example. I could get the Tkinter interface to run separately and I could also get a stream of data from the IR sensor separately, but I had trouble combining them. Apparently, the reason is that I have two infinite while loops and the one that comes first in the code blocks the other. While the code waits for input from the serial port, nothing else can happen. And while the interface is running, nothing else can happen. I couldn't figure this out using the examples that I found online. The following day I gave up and asked ChatGPT to change the code to make the two loops run concurrently. That resulted in code that ran, but I needed to make some changes to it. Only the grey bar was changing size between 0 and 1000 pixels, so I put 1000-y as the width of the black bar. That worked nicely. The interface was also sluggish, but I fixed that by changing root.after(100, readFromSerial) to root.after(10, readFromSerial) . Then there is a much shorter delay for updating the interface. We have a GUI that runs smoothly.","title":"Visualizing the light readings"},{"location":"seeed.html#design-files_1","text":"Download IR sensor Arduino code Download Python terminal visualization code Download Python GUI code","title":"Design files"},{"location":"seeed.html#the-tea-machine","text":"My next major step was a machine control board for the machine building group project. We made a tea-steeping machine. The clean aesthetics of the machine are thanks to Hafey , who designed and made the structure on the Shopbot and the laser cutter. She also made the logo on the vinyl cutter, which means that we used all the machines in the Fab Lab! The Icelandic Machine Week team: Svavar, Andri and Hafey. In the Fab Academy, we talk about spiral development. The trick to developing a working product is to make a very rough version the whole thing (instead of perfecting a small part of it) and then doing another spiral to fix bugs and add features, and so on as long as you have time.","title":"The tea machine"},{"location":"seeed.html#machine-controller-spiral-1","text":"Machine control spiral 1: An L298N stepper driver module on a breadboard with a SparkFun RedBoard, which is essentially the same thing as an Arduino Uno.","title":"Machine controller spiral 1"},{"location":"seeed.html#machine-controller-spiral-2","text":"The second spiral was to make a custom board with a Xiao RP2040 microcontroller module, a DRV8825 StepStick motor controller, 12V input pins from a lab power supply and GPIO breakout pins for a servo and two buttons. In Machine Week I made my biggest leap forward in electronics design. I also developed my methodical method of breadboarding and testing the hardware and software, one element at a time, before transferring the design over to KiCAD. The custom board that I made is an extension of spiral 2. The first board had mounting holes that were far too big and the board also came loose during milling. Bad board and good board. I input a radius for the mounting holes when I thought I was defining their diameter. So the holes are huge on the board on the left! And I didn't use enough double-sided tape to secure the PCB blank, so it shifted during the trace milling operation. After a redesign, the second attempt to mill the board went well. The board on the right is the final version of the TeaManator controller board. I forgot the drilling holes for the electrolytic bulk storage capacitor for the stepper driver, so I drilled those holes afterwards. Hand drilling the last two holes in the board. I only had through-hole female headers, so I bent their legs in order to be able to surface mount them. Bending the legs for surface mounting. The final TeaManator machine controller. I learned a lesson in considering which side through-hole components need to be on in order to touch the copper traces. Close-up of the machine controller, all connected up. The TeaManator 2000 tea steeping machine. Clean and elegant. The reality behind the facade. The USB hub (with AC adapter) and the big power supply are only there to supply 5V to the Xiao and 12V to the stepper driver, because we didn't have time to learn how to make a power supply. I realized then that I need to think seriously about a neat way to power my final project.","title":"Machine controller spiral 2"},{"location":"seeed.html#machine-controller-spiral-3-not-my-work","text":"The first Stepper Modular Thing that Andri made. He had to do considerable editing to make the circuit fabricatable. After 3D printing all the parts for the linear motion axis , Andri worked tirelessly on the third spiral, which was to make a Modular Things stepper controller board . We were really excited about this solution, but this design really thin traces and two layers, making it difficult to make. Andri made lots of modifications to the design in Fusion 360 in order to make the traces thicker and reroute everything so that it fit on one layer. He successfully milled the board and soldered all the components to it, but it didn't work. Unfortunately, the motor drivers in the original design need a higher voltage than 5V to work. The designer, Quentin Bols\u00e9e was very responsive to our questions. Then our instructors \u00c1rni and \u00de\u00f3rarinn(https://fabacademy.org/archives/2015/eu/students/gunnarsson.thorarinn_b.b/index.html), recalled that Yuichi Tamiya at Fab Lab Kannai made a working version of the Modular Things stepper control board at the 2023 instructor bootcamp in Amsterdam. Andri proceeded to make the board and \u00c1rni soldered the components onto it. It worked on the first try! The second Stepper Modular Thing that Andri made. Wow! It's powered by the USB port! We didn't have time to integrate it into our machine, but I'm very glad that Andri and our instructors were able to make a working Modular Thing. Seeing the Stepper Modular Thing working and being able to make the machine control board successfully combined to give me the confidence to try to make a robot arm joint immediately when I arrived back in \u00cdsafj\u00f6r\u00f0ur.","title":"Machine controller spiral 3 (not my work)"},{"location":"seeed.html#our-instructors","text":"We are lucky to have these instructors. Here are some images to prove it: Left: \u00de\u00f3rarinn explaining some electronics to Hafey. Right: Andri showing \u00c1rni the teabag holder that he made from bent acrylic. Attention: Coffee for Svavar! Our instructors took good care of us during this intense work session. My instructor \u00de\u00f3rarinn also disassembled a stepper motor and showed us how it works: Left: The stepper rotor, with its many iron teeth visible. Right: The step signal that turns the rotor (two of the phases are connected to the oscilloscope).","title":"Our instructors"},{"location":"seeed.html#my-final-project","text":"","title":"My final project"},{"location":"seeed.html#final-project-spiral-1","text":"After Machine Week, I tried making Yuichi Tamiya's Modular Things stepper board . Yuichi Tamiya's Modular Things stepper board from the 2023 instructor bootcamp in Amsterdam. This is the last board that Andri made in Machine week with the help of our instructors. It worked, so immediately after I got back to \u00cdsafj\u00f6r\u00f0ur I made one of my own: OMG, it's so smooth and quiet! \u00de\u00f3rarinn found me all excited when he came to work. Fig rolls and the trusty Tandy 102 by my side, and a candle lit on my desk to keep my father with me as I work. He would have loved this.","title":"Final project spiral 1"},{"location":"seeed.html#design-file","text":"Download Stepper H-bridge RP2040 Modular Thing Arduino code Download svavar-stepper.js","title":"Design file"},{"location":"seeed.html#spiral-1-3d-design","text":"I was so excited to see a motor moving that I immediately started to design 3D printed parts for spiral 1 of my robot arm. I bought two sizes of brushless motors, thinking that I would use a bigger motor in the base. I based the shape of the board on that. A few days after I designed the shape, I decided to change the orientation of the arm from vertical (regular robot arm) to horizontal (SCARA arm). Then there's no strain on the motors when the arm is stationary and I don't need to use the bigger and more expensive brushless motor. I also decided to keep the stepper in the base, not because I wanted to use a stepper but simply because I had a working stepper. Spiral development! This Fusion 360 model is named stepper_festing, which means stepper_bracket. I only meant to design a fixture for the stepper, but it quickly turned into a whole robot arm. Assembling spiral 1 of my robot arm.","title":"Spiral 1 3D design"},{"location":"seeed.html#robot-base","text":"The 3D printed base for spiral 1 of my robot arm. The support material came easily away from the part in one piece. Neat! Here's the Stepper RP2040 Modular Thing that I made for the stepper in the base of the arm. Look closely and you'll see the tiny white TPU washers that I made avoid making contact between the screws and the traces.","title":"Robot base"},{"location":"seeed.html#spiral-1-assembly","text":"Robot arm spiral 1.","title":"Spiral 1 assembly"},{"location":"seeed.html#design-file_1","text":"Download robot arm spiral 1 Fusion 360 model","title":"Design file"},{"location":"seeed.html#my-pcb-design","text":"I heavily modified Yuichi's board, changing the shape and adding header pins, so that I could use all the Xiao RP2040's pins. I can now connect the brushless motor to the two H-bridges (it needs one and a half H-bridge) and I can connect the encoder to 3.3 V, ground and a digital pin on the Xiao. Trying the Autorouter in Fusion360. I ended up switching to KiCAD and routing everything manually. My robot joint v1 PCB. I also added one header pin to the current sense resistor, hoping that I can read the current going into the motor. That would be very useful, because it's a way to prevent the H-bridges from overheating (I burned a motor driver on a commercial robot arm once and I want to make it impossible on my arm) and I can also use the measured current as a way to measure the force on the joint. Current sensing is not available on any hobby robot that I know of, so if this works, then it will be a great feature! I also added a 7-11V power input for the brushless motor. Yuichi's stepper board uses the 5V USB pin to power the stepper, but my brushless motor needs a higher voltage. I will just be using a lab power supply for now. I will figure out the arm's power supply later. Does it make sense to add a boost converter? I don't know, converting 230V AC into 5V and then converting 5V into 11V sounds a bit messy to me.","title":"My PCB design"},{"location":"seeed.html#design-files_2","text":"Download Robot joint v1 KiCAD project","title":"Design files"},{"location":"seeed.html#putting-dupont-connectors-on-the-motor","text":"The power connector that came with the motor is too small for the standard 2.54 mm pin headers in the Fab Lab Inventory, so my instructor \u00de\u00f3rarinn showed me how to crimp Dupont connectors onto the wires. Part 1 Part 2 Part 3 Part 4 Part 5 Small connector. \u00de\u00f3rarinn's Dupont connector kit. Aligning a female Dupont connector to the wire. The first crimp connection grabs the plastic cover and the second one grabs the bare wire and secures an electrical connection. Crimping the connector onto the wire. More recently I've started to use narrow nose pliers instead. Then I can control exactly how the crimping goes and I don't waste as many Dupont connectors. Triple Dupont connector, ready for service.","title":"Putting Dupont connectors on the motor"},{"location":"seeed.html#pcb-production","text":"Under number of offsets (off screen) I typed -1, to have the milling machine clear all the excess copper off the board. I thought this was the safest move, since I'll be putting a BLDC motor with an aluminum chassis onto the board. That's a nice-looking board. The components for arm joint v1, with a general comment on component labeling.","title":"PCB production"},{"location":"seeed.html#scaling-problem","text":"The holes for the brushless motor screws were too far apart. How could that be? I exported the arm profile with the holes directly to DXF from Fusion 360, imported them into KiCAD and then exported to SVG without modifications. My instructor \u00de\u00f3rarinn suggested that my DPI settings in Inkscape and Fab Modules might be off. If you check the Fab Modules image, you'll see that the resolution was automatically set to 999.99 dots per inch, instead of 1000.","title":"Scaling problem"},{"location":"seeed.html#oh-no-torn-motor-pins","text":"I tore the motor pins off the board when I was trying to insert the connector. The copper also came off the board. This was a design lesson: you have to put the connectors all the way at the edge of the board! I don't know what I was thinking. This was very frustrating. I had to stop working, cool off and come back the next day. With a level head, I thought that I might actually be able to save this board using the adhesive-backed copper sheet that I use on the vinyl cutter.","title":"Oh no, torn motor pins!"},{"location":"seeed.html#the-fix","text":"Part 1 Part 2 Part 3 Part 4 Part 5 First I cut the MOTOR OUTPUT and CURRENT SENSE letters off the board with a box cutter. Then I tried cutting a strip of copper sheet and I successfully glued it onto the board. Copper sheet added for the other three motor phases. Then I carefully soldered the horizontal header pins onto the copper sheet and made a solder bridge from the sheets to the traces on the board. Finally I added some hot glue to add a little bit of strength.","title":"The fix"},{"location":"seeed.html#stepper-control-with-my-board","text":"Driving a stepper from the Modular Things web interface using my arm joint control board. When testing my arm joint v1 with a stepper motor, I accidentally ripped the stepper motor pin header off the board and took some of the traces along with it. A current sense header pin also fell off the board. I decied to call it quits with making stuff for the day, went to the Heimabygg\u00f0 coffee house and wrote up my experiences. With fresh eyes (and a fresh espresso) at the lab the next morning, I thought of a way to fix the board. I would cut strips of adhesive-backed copper sheet and glue new traces onto the board. I soldered them to the remains of the old traces on one end and to the header pins on the other end, and after a bit of troubleshooting, the board worked! I've tried 247, 427, 274, 472, 742, 724 - that covers all possible $3! = 6$ combinations. I'm getting PWM output on Xiao pins 0, 2 and 4. Now I know that the right pins are 7, 2 and 4. I get good PWM output for the motor from pins 2 and 4 but I get the strange sawtooth output from pin 7.","title":"Stepper control with my board"},{"location":"seeed.html#design-files_3","text":"Download Stepper H-bridge RP2040 Arduino code Download Svavar stepper Modular Things JavaScript code","title":"Design files"},{"location":"seeed.html#led-pwm-test","text":"Before trying to move the brushless motor, I checked whether I was getting a sinusoidal PWM on three output pins. I did this by outputting the motor control signals to the RGB LED that is built into the Xiao RP2040 board. I used Adrian's pinout image of the Xiao RP2040 many, many times because it contains the Arduino pin numbers: This image has been a very useful reference. To make the sinusoidal PWM motor control signals go to the RGB LED, I defined pins 17, 16 and 25 as the output pins. Seems to be working!","title":"LED PWM test"},{"location":"seeed.html#design-file_2","text":"Download sinusoidal PWM for RGB LED Arduino code","title":"Design file"},{"location":"seeed.html#bldc-control-with-my-board","text":"Here I'm controlling the BLDC with sinusoidal PWM signals: Getting some erratic behavior. This same code worked with the L298N stepper driver. After trying a few different speeds and voltages, I finally got the motor to spin around in circles in the last shot.","title":"BLDC control with my board"},{"location":"seeed.html#design-files_4","text":"Download sinusoidal L298N brushless control Arduino code","title":"Design files"},{"location":"seeed.html#debugging","text":"The brushless motor moved erratically no matter what I tried. I wondered if I had soldered the wrong capacitors onto the board. I tried to measure them with a component tester: Trying to measure a capacitor with a component tester. I couldn't get a reading with the component tester. Eventually I decided that I must have put the right capacitors on the board because I was so systematic and methodical in soldering the board. Finally, I tried lowering the power supply voltage to 5V. The motor still worked. Then I switched the motor over to Yuichi's Modular Things stepper driver and found erratic behavior there too. It seems that this Toshiba motor driver just doesn't cut it. I then connected the motor to the ancient L298N double H-bridge and it worked! OK, so the Toshiba H-bridge is out and I need to look for an alternative. Looking at the signals from the H-bridges. The board can control a stepper just fine. When trying to control a brushless motor, one H-bridge is a problem. It's the one that has only one pin connected. It seems that these motor drivers don't have independent half-H-bridges, which is what I need for brushless motor control. I'm going to abandon this board. I also noticed a lot of compliance in the structure. It seems to stem mostly from the stepper coupling that I designed. This is something I can improve in the next spiral. See the arm bending here:","title":"Debugging"},{"location":"seeed.html#final-project-spiral-2","text":"","title":"Final project spiral 2"},{"location":"seeed.html#basic-shape-study","text":"Basic shape study. Since the arm is made of flat PCBs, I don't have many parameters to play with. Dimensions of the basic shape. I set the diameter of all the arcs to d3 , which is the diameter of the first arc. I change that and the whole model updates. I eventually decided to make all the joints the same shape, because it's simpler and because when the big arcs go inward, there isn't enough room on the board for all the components. So here's the final 3D design: Here's baksi, the spiral 2 version.","title":"Basic shape study"},{"location":"seeed.html#design-files_5","text":"Download baksi spiral 2 concept Fusion 360 model Download 3D print with internal channels Download base","title":"Design files"},{"location":"seeed.html#electronics-design","text":"I swapped out the Xiao SAMD21 for the bare SAMD21 microcontroller. I made this design spiral in the Fab Lab and I'm planning to have Seeed Studio make the boards for design spiral 3. The baksi robot joint schematic. The baksi robot joint PCB layout.","title":"Electronics design"},{"location":"seeed.html#pcb-production_1","text":"My first attempt at milling the PCB failed, and I broke the smallest end mill (the 0.01\" one). I only have one left now. Looking back, I made the fundamental mistake of not making a small test of the most challenging aspect of the process. Then I tried a V-bit: The moment I realized that I could finish my Fab Academy final project. I went to the video conferencing screen in the lab with my hands up in victory, and they guys celebrated with me. Look at those beautiful traces. When soldering the teeny tiny DRV8313 motor driver onto my beautiful board, I found that its legs are very thin and flexible, and so when you've fastened the driver to the big ground plane with a heat gun, you can bend the legs into place, as long as they're close to their intended copper pad. After soldering, I successfully put the bootloader on the SAMD21 chip and then programmed it with the SimpleFOC code. But I got no reading from the magnetic angle sensor and the serial monitor said that it detected no movement from the motor. The motor sounded weird.","title":"PCB production"},{"location":"seeed.html#design-files_6","text":"Download baks KiCAD project Download baks_joint2_traces.png Download baks_joint2_traces_exterior.png Download baks_joint2_holes_interior.png","title":"Design files"},{"location":"seeed.html#sensing-board","text":"I also made a sensing board for Baksi. It contains an endstop button for the Z-axis as well as a capacitive step-response proximity sensor, so that it can sense when a human gets too close, and stop moving. It has a Xiao SAMD21. I had a little trouble finding the right pin names for the Seeeduino Xiao SAMD21. In the first place, when I first connected it, it was set up as a Seeeduino Femto. I couldn't find much info on that online. I tried uploading an Arduino sketch to it as a Seeduino Xiao SAMD21, but it got bricked and didn't show up on my computer anymore. Not in the Arduino IDE and not in Device Manager either. After a bit of Googling I found the solution to this problem. I shorted the connection between the RESET pads on one side of the Xiao's USB connector and it immediately appeared on my computer as a UF2 drive. I then tried uploading the same Arduino sketch to it as a Xiao Femto, and it worked. But what's the pinout of the Xiao Femto? I tried the Xiao SAMD21 pin numbers but they didn't work. I also tried my Blink all pins sketch, where I make every pin from 0 to 40 blink once and write its number to the serial monitor at the same time. I connected each pin to an LED to discover the pin numbers. But now the problem was that after uploading, the device disappeared and so I couldn't get data from it through the serial port. So I tried blinking the LED as many times as the number of the pin that I was testing, After a good wait, I counted twelve blinks on my red LED. Alright. I connected every pin to an LED using my LED debugging board and was able to get the pinout of the Xiao Femto.","title":"Sensing board"},{"location":"seeed.html#final-project-presentation","text":"Presentation slide. 1 minute presentation video. Here I am presenting my final project to Professor Neil Gershenfeld and the instructors and students in the 2023 Fab Academy cycle. Link to the video. As for the outcome of the final project: I love how you can see all the electronic components and yet the robot has a clean look and all the wires are hidden. All of them! That took a LOT of system integration work. The robot actually looks pretty much exactly like I envisioned it. However, assembling the robot was hell. Wires kept breaking and it was difficult to get them into the 3D printed part. I wouldn't want to do it like this again. This was spiral 2. In spiral 3, I want to design a multilayer PCB that contains all the wires that are currently hidden inside the 3D printed part. Then I can realize my original vision of a robot that is made of motors and PCB and nothing else! And it will still have a clean look!","title":"Final project presentation"},{"location":"seeed.html#baksi-software","text":"After the Fab Academy, I received a grant from the Icelandic government to hire a university student to make a graphical user interface to control Baksi the robot. Here is the resulting software, written in Python: Version 1 of the Baksi GUI. The software was written by Gu\u00f0j\u00f3n Bergmann, who is studying Aerospace Engineering at TU Delft. We've made a robot together before . Gu\u00f0j\u00f3n Bergmann. I look forward to continuing the project with the help of Seeed Studio. I'm excited to get professionally manufactured (and perhaps also assembled) boards. It may also be useful to order a few precision 3D printed parts and CNC milled aluminum brackets for the Z-axis motors. I need to do a fair bit of customizing to make an improved, clean-looking Z-axis. Coming soon! (I have higher resolution images and videos if you want.)","title":"Baksi software"},{"location":"setup.html","text":"Setup In a video call, \u00c1rni Bj\u00f6rnsson showed M\u00f3ses and me how to set up MkDocs and Git. I've summarized all the steps here, with a few extra resources I found along the way: MkDocs setup from scratch First, I installed the VSCode code editor. Then, as \u00c1rni Bj\u00f6rnsson suggested, I created a folder called code directly in my C: drive, so that Dropbox and OneDrive don't try to sync the folder and mess up my GitHub connection. I followed this tutorial to set up MkDocs. There are a few steps to it: It starts with installing the Python extension for VSCode . The pip package manager is included with the Python extension, but for some reason you don't always get the latest version. It may be a good idea to check the version. I opened a new terminal in the top menu in VSCode ( Terminal -> New Terminal ) and typed pip --version pip 22.3.1 from C:\\Users\\your_username\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pip (python 3.10) and if it says it's out of date you can upgrade pip like this: pip install --upgrade pip Now it was time to install MkDocs: pip install mkdocs Then, as the tutorial suggests, I typed mkdocs --version to see if the installation went OK: mkdocs --version mkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8) (optional) I also installed the Material theme because it seemed nice and it includes expandable code annotations: pip install mkdocs-material Note To enable notes like this one in MkDocs, I added Admonitions to the extensions in the mkdocs.yml file: markdown_extensions : admonition Then, to create a note, start with !!! note and then indent the note text: !!! note Note text MkDocs test drive I followed this tutorial to set up a small test website and get a live preview. After installing Material for MkDocs, I made a folder called Mkdocs. Then I opened a terminal and made sure that it was in the right folder: cd C:\\code\\Mkdocs Then I simply typed mkdocs new . and that was enough to create a simple site! Well, there are a few extra steps to view the site and deploy it, but this whole process is very simple. Then I added the following lines to mkdocs.yml: theme : name : material This is geared towards the Material theme for MkDocs, so if you're using a different theme, the only thing you need to change is the the theme line in the mkdocs.yml file. Set up autocomplete. The tutorial suggests adding a line to settings.json, but it doesn't mention where that file is in VSCode. But it does provide a link to instructions. You go into File -> Preferences -> Settings , scroll all the way down to Yaml: Schemas, and click Edit in settings.json . Then you add the line \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\" , so in the end it looks like this: { \"workbench.colorTheme\" : \"Default Dark+\" , \"files.autoSave\" : \"afterDelay\" , \"yaml.schemas\" : { \"https://squidfunk.github.io/mkdocs-material/schema.json\" : \"mkdocs.yml\" } } OK, now we're yearning for something to happen. Type the following into the terminal: mkdocs serve Now open your browser and write localhost:8000 in the address bar. Voil\u00e1! We have a live preview for an MkDocs website! Material theme Default theme The source code for this site, written in Markdown, looks like this: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://www.mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs -h` - Print help message and exit. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. As you can see, Markdown is simple and readable. Writing # gives you the biggest heading, ## gives you heading 2, and so on. Put * in front of text to make a bullet point. To add a link, you do this: [mkdocs.org](https://www.mkdocs.org) and to add an image you do the same, but with an exclamation mark: ![Material theme](./images/material.png) 5. Finally, to build a static site, write this in the terminal: mkdocs build I tried this and got an index page that works fine. But when I clicked the Setup page (this page) I got this: Hm. Apparently you need to put the structure of the site into your mkdocs.yml file to explicitly state the site navigation. So I opened it up and added nav: - 'index.md' - 'code.md' # The code page is just a few code block tests in different languages. - 'setup.md' No, that didn't work either. After some looking around I found a solution . I added the following line to mkdocs.yml : use_directory_urls: false It works! And the first solution is unnecessary; MkDocs will infer the site navigation based on the pages you create in the docs folder. Setting up MkDocs and getting the live preview working took me an hour in the morning. Writing up how I did it took me the rest of the day. It was a great way to learn Markdown. I like Markdown, with one exception; I don't have the ` symbol on my keyboard. I need to use that quite a lot for code snippets. Now this page serves as my reference in writing documentation. Note To enable code highlighting (coloring the code, similar to how it looks in the VSCode editor), I added the following lines to mkdocs.yml : markdown_extensions: - pymdownx.highlight: anchor_linenums: true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences - pymdownx.details I'm not sure if all these lines are necessary, but I'm just following this tutorial . The last line comes from somewhere else, I don't remember where. Anyway, now I can make a code block by enclosing the code with ``` at the top and bottom and including the name of the language at the top: ```python # This program prints Hello, world! print('Hello, world!') ``` This results in: # This program prints Hello, world! print ( 'Hello, world!' ) You can use this reference to write the name of the programming language correctly at the top of your code block. One more thing, I also added markdown_extensions : - attr_list - md_in_html to add the ability to align images, add captions and mark large images for lazy loading, as per this tutorial . Customizing the theme There is a way to toggle between light and dark mode. This tutorial says that it's enough to copy the following code into mkdocs.yml : Light/dark toggle Light/dark toggle + Color change theme : palette : # Palette toggle for light mode - scheme : default toggle : icon : material/brightness-7 name : Switch to dark mode # Palette toggle for dark mode - scheme : slate toggle : icon : material/brightness-4 name : Switch to light mode theme : palette : # Palette toggle for light mode - scheme : default toggle : icon : material/brightness-7 name : Switch to dark mode primary : red accent : red # Palette toggle for dark mode - scheme : slate toggle : icon : material/brightness-4 name : Switch to light mode primary : red accent : red Source code for the content tabs above === \"Light/dark toggle\" ``` yaml theme: palette: # Palette toggle for light mode - scheme: default toggle: icon: material/brightness-7 name: Switch to dark mode # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-4 name: Switch to light mode ``` === \"Light/dark toggle + Color change\" ``` yaml palette: # Palette toggle for light mode - scheme: default toggle: icon: material/brightness-7 name: Switch to dark mode primary: red accent: red # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-4 name: Switch to light mode primary: red accent: red ``` Note How to enable content tabs in mkdocs.yaml : markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true I also discovered that if you select a command, right click and select Change All Occurrences in VSCode, you only need to write the new color once, instead of four times. Nice! Finally, I made a logo in Inkscape. I designed this logo in grade school, it's a kind of Icelandic rune that combines my initials S and K. Then I added two lines to mkdocs.yml to change the logo in the top left corner and also the favicon (the icon you see in the browser tab). theme : logo : images\\SK_logo.svg favicon : images\\SK_logo.svg First I wrote the path as /images/SK_logo.SVG and VSCode complained about the formatting. I found that you can right click the image and select Copy Relative Path to get the right formatting. That gave me docs\\images\\SK_logo.svg , which didn't work, but when I changed it to images\\SK_logo.svg it worked. I also enabled two navigation options: theme : features : - navigation.instant # Instant loading (page behaves like a single-page application, search persists between pages) - navigation.tabs # The pages are visible as tabs at the top instead of on the left hand side. GitHub setup To set up a GitHub connection, I followed this official VSCode tutorial and installed the GitHub Pull Requests and Issues extension . I was supposed to sign in but no sign in button appeared when I selected the GitHub icon in the left menu bar in VSCode. I did some more Googling and found an unofficial tutorial that told me to sign in via the Accounts symbol in the bottom left corner of VSCode. I selected Turn on edit sessions sync and signed in with Github in a browser. Then I was redirected to VSCode, but that wasn't the end of it. I selected Accounts again and there an option to sign in to the Github extension appeared. I selected that, signed in in the browser and now I was finally signed in and could continue with the GitHub setup. But the the official tutorial didn't tell me how to get files from my computer to GitHub. I needed to look elsewhere. I threw my hands up in the air and Googled i have code on my computer how do i create github repository . The first result was this official GitHub guide . The third step resulted in an error: The token '&&' is not a valid statement separator in this version. What then? I like MkDocs so far but I don't like Git so far. Let's see what this tutorial gets me: PS C:\\code\\Mkdocs> git init -b main Initialized empty Git repository in C:/code/Mkdocs/.git/ PS C:\\code\\Mkdocs> git status On branch main No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/ mkdocs.yml site/ nothing added to commit but untracked files present (use \"git add\" to track) PS C:\\code\\Mkdocs> git commit On branch main Initial commit Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/ mkdocs.yml site/ nothing added to commit but untracked files present (use \"git add\" to track) PS C:\\code\\Mkdocs> git push fatal: No configured push destination. Either specify the URL from the command-line or configure a remote repository using git remote add <name> <url> and then push using the remote name git push <name> Sigh. Let's try to create a repository in the GitHub web interface and see if we can push these files to it. PS C:\\code\\Mkdocs> git remote add Mkdocs https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git push Mkdocs fatal: The current branch main has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream Mkdocs main To have this happen automatically for branches without a tracking upstream, see 'push.autoSetupRemote' in 'git help config'. What does upstream mean? OK, maybe I need to push specific files and folders inside the Mkdocs directory. PS C:\\code\\Mkdocs> git remote add mkdocs.yml https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git remote add site https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git remote add docs https://github.com/svavarkonn/MkDocs Nothing. Nothing happened. PS C:\\code\\Mkdocs> git push MkDocs error: src refspec refs/heads/main does not match any error: failed to push some refs to 'MkDocs' So far, this is not fun. Page source The Markdown code for the View page Source button is like this: [View page source](setup.txt){ .md-button } I'm going to put it on every page of my documentation. If you see an interesting element in the page, you can then easily see how to set it up. Pointing to a .md file doesn't work, so my workaround is to make a copy of the Markdown source file and change its extension to .txt . I made a Python script using this tutorial and put it in the MkDocs folder. The script copies all the .md files in the docs folder to another folder called textfiles and converts their extension to .txt. To change the theme for just the home page, I followed tmeuze's advice in this issue . To mkdocs.yml I added custom_dir : docs/overrides and created a docs/overrides folder. Then I was unsure how to set up a custom theme, so I stopped there. To enable the Github Repository button in the top right corner, I followed this example and added the following to my mkdocs.yml , just below site_name : repo_name : Github Repository repo_url : https://github.com/svavarkonn/MkDocs I added theme : features : - navigation.tracking so that the URL in the address bar changes as you scroll down the page. If you copy the URL, the page will open in the section where you were when you copied it. Might be convenient if someone wants to cite something on this site. I also added theme : features : - navigation.tabs - navigation.tabs.sticky to make the top navigation follow you as you scroll down the page. By default, an \"Edit this page\" symbol is added to the right of the headline of every page. When you click it you just get a 404 error. I followed [this] to remove the edit button. I just add < style > . md-content__button { display : none ; } </ style > to the .md file of each page and voil\u00e1! The edit button disappears. View page source .md-content__button { display: none; }","title":"Setup"},{"location":"setup.html#setup","text":"In a video call, \u00c1rni Bj\u00f6rnsson showed M\u00f3ses and me how to set up MkDocs and Git. I've summarized all the steps here, with a few extra resources I found along the way:","title":"Setup"},{"location":"setup.html#mkdocs-setup-from-scratch","text":"First, I installed the VSCode code editor. Then, as \u00c1rni Bj\u00f6rnsson suggested, I created a folder called code directly in my C: drive, so that Dropbox and OneDrive don't try to sync the folder and mess up my GitHub connection. I followed this tutorial to set up MkDocs. There are a few steps to it: It starts with installing the Python extension for VSCode . The pip package manager is included with the Python extension, but for some reason you don't always get the latest version. It may be a good idea to check the version. I opened a new terminal in the top menu in VSCode ( Terminal -> New Terminal ) and typed pip --version pip 22.3.1 from C:\\Users\\your_username\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pip (python 3.10) and if it says it's out of date you can upgrade pip like this: pip install --upgrade pip Now it was time to install MkDocs: pip install mkdocs Then, as the tutorial suggests, I typed mkdocs --version to see if the installation went OK: mkdocs --version mkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8) (optional) I also installed the Material theme because it seemed nice and it includes expandable code annotations: pip install mkdocs-material Note To enable notes like this one in MkDocs, I added Admonitions to the extensions in the mkdocs.yml file: markdown_extensions : admonition Then, to create a note, start with !!! note and then indent the note text: !!! note Note text","title":"MkDocs setup from scratch"},{"location":"setup.html#mkdocs-test-drive","text":"I followed this tutorial to set up a small test website and get a live preview. After installing Material for MkDocs, I made a folder called Mkdocs. Then I opened a terminal and made sure that it was in the right folder: cd C:\\code\\Mkdocs Then I simply typed mkdocs new . and that was enough to create a simple site! Well, there are a few extra steps to view the site and deploy it, but this whole process is very simple. Then I added the following lines to mkdocs.yml: theme : name : material This is geared towards the Material theme for MkDocs, so if you're using a different theme, the only thing you need to change is the the theme line in the mkdocs.yml file. Set up autocomplete. The tutorial suggests adding a line to settings.json, but it doesn't mention where that file is in VSCode. But it does provide a link to instructions. You go into File -> Preferences -> Settings , scroll all the way down to Yaml: Schemas, and click Edit in settings.json . Then you add the line \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\" , so in the end it looks like this: { \"workbench.colorTheme\" : \"Default Dark+\" , \"files.autoSave\" : \"afterDelay\" , \"yaml.schemas\" : { \"https://squidfunk.github.io/mkdocs-material/schema.json\" : \"mkdocs.yml\" } } OK, now we're yearning for something to happen. Type the following into the terminal: mkdocs serve Now open your browser and write localhost:8000 in the address bar. Voil\u00e1! We have a live preview for an MkDocs website! Material theme Default theme The source code for this site, written in Markdown, looks like this: # Welcome to MkDocs For full documentation visit [mkdocs.org](https://www.mkdocs.org). ## Commands * `mkdocs new [dir-name]` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server. * `mkdocs build` - Build the documentation site. * `mkdocs -h` - Print help message and exit. ## Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. As you can see, Markdown is simple and readable. Writing # gives you the biggest heading, ## gives you heading 2, and so on. Put * in front of text to make a bullet point. To add a link, you do this: [mkdocs.org](https://www.mkdocs.org) and to add an image you do the same, but with an exclamation mark: ![Material theme](./images/material.png) 5. Finally, to build a static site, write this in the terminal: mkdocs build I tried this and got an index page that works fine. But when I clicked the Setup page (this page) I got this: Hm. Apparently you need to put the structure of the site into your mkdocs.yml file to explicitly state the site navigation. So I opened it up and added nav: - 'index.md' - 'code.md' # The code page is just a few code block tests in different languages. - 'setup.md' No, that didn't work either. After some looking around I found a solution . I added the following line to mkdocs.yml : use_directory_urls: false It works! And the first solution is unnecessary; MkDocs will infer the site navigation based on the pages you create in the docs folder. Setting up MkDocs and getting the live preview working took me an hour in the morning. Writing up how I did it took me the rest of the day. It was a great way to learn Markdown. I like Markdown, with one exception; I don't have the ` symbol on my keyboard. I need to use that quite a lot for code snippets. Now this page serves as my reference in writing documentation. Note To enable code highlighting (coloring the code, similar to how it looks in the VSCode editor), I added the following lines to mkdocs.yml : markdown_extensions: - pymdownx.highlight: anchor_linenums: true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences - pymdownx.details I'm not sure if all these lines are necessary, but I'm just following this tutorial . The last line comes from somewhere else, I don't remember where. Anyway, now I can make a code block by enclosing the code with ``` at the top and bottom and including the name of the language at the top: ```python # This program prints Hello, world! print('Hello, world!') ``` This results in: # This program prints Hello, world! print ( 'Hello, world!' ) You can use this reference to write the name of the programming language correctly at the top of your code block. One more thing, I also added markdown_extensions : - attr_list - md_in_html to add the ability to align images, add captions and mark large images for lazy loading, as per this tutorial .","title":"MkDocs test drive"},{"location":"setup.html#customizing-the-theme","text":"There is a way to toggle between light and dark mode. This tutorial says that it's enough to copy the following code into mkdocs.yml : Light/dark toggle Light/dark toggle + Color change theme : palette : # Palette toggle for light mode - scheme : default toggle : icon : material/brightness-7 name : Switch to dark mode # Palette toggle for dark mode - scheme : slate toggle : icon : material/brightness-4 name : Switch to light mode theme : palette : # Palette toggle for light mode - scheme : default toggle : icon : material/brightness-7 name : Switch to dark mode primary : red accent : red # Palette toggle for dark mode - scheme : slate toggle : icon : material/brightness-4 name : Switch to light mode primary : red accent : red Source code for the content tabs above === \"Light/dark toggle\" ``` yaml theme: palette: # Palette toggle for light mode - scheme: default toggle: icon: material/brightness-7 name: Switch to dark mode # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-4 name: Switch to light mode ``` === \"Light/dark toggle + Color change\" ``` yaml palette: # Palette toggle for light mode - scheme: default toggle: icon: material/brightness-7 name: Switch to dark mode primary: red accent: red # Palette toggle for dark mode - scheme: slate toggle: icon: material/brightness-4 name: Switch to light mode primary: red accent: red ``` Note How to enable content tabs in mkdocs.yaml : markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true I also discovered that if you select a command, right click and select Change All Occurrences in VSCode, you only need to write the new color once, instead of four times. Nice! Finally, I made a logo in Inkscape. I designed this logo in grade school, it's a kind of Icelandic rune that combines my initials S and K. Then I added two lines to mkdocs.yml to change the logo in the top left corner and also the favicon (the icon you see in the browser tab). theme : logo : images\\SK_logo.svg favicon : images\\SK_logo.svg First I wrote the path as /images/SK_logo.SVG and VSCode complained about the formatting. I found that you can right click the image and select Copy Relative Path to get the right formatting. That gave me docs\\images\\SK_logo.svg , which didn't work, but when I changed it to images\\SK_logo.svg it worked. I also enabled two navigation options: theme : features : - navigation.instant # Instant loading (page behaves like a single-page application, search persists between pages) - navigation.tabs # The pages are visible as tabs at the top instead of on the left hand side.","title":"Customizing the theme"},{"location":"setup.html#github-setup","text":"To set up a GitHub connection, I followed this official VSCode tutorial and installed the GitHub Pull Requests and Issues extension . I was supposed to sign in but no sign in button appeared when I selected the GitHub icon in the left menu bar in VSCode. I did some more Googling and found an unofficial tutorial that told me to sign in via the Accounts symbol in the bottom left corner of VSCode. I selected Turn on edit sessions sync and signed in with Github in a browser. Then I was redirected to VSCode, but that wasn't the end of it. I selected Accounts again and there an option to sign in to the Github extension appeared. I selected that, signed in in the browser and now I was finally signed in and could continue with the GitHub setup. But the the official tutorial didn't tell me how to get files from my computer to GitHub. I needed to look elsewhere. I threw my hands up in the air and Googled i have code on my computer how do i create github repository . The first result was this official GitHub guide . The third step resulted in an error: The token '&&' is not a valid statement separator in this version. What then? I like MkDocs so far but I don't like Git so far. Let's see what this tutorial gets me: PS C:\\code\\Mkdocs> git init -b main Initialized empty Git repository in C:/code/Mkdocs/.git/ PS C:\\code\\Mkdocs> git status On branch main No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/ mkdocs.yml site/ nothing added to commit but untracked files present (use \"git add\" to track) PS C:\\code\\Mkdocs> git commit On branch main Initial commit Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/ mkdocs.yml site/ nothing added to commit but untracked files present (use \"git add\" to track) PS C:\\code\\Mkdocs> git push fatal: No configured push destination. Either specify the URL from the command-line or configure a remote repository using git remote add <name> <url> and then push using the remote name git push <name> Sigh. Let's try to create a repository in the GitHub web interface and see if we can push these files to it. PS C:\\code\\Mkdocs> git remote add Mkdocs https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git push Mkdocs fatal: The current branch main has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream Mkdocs main To have this happen automatically for branches without a tracking upstream, see 'push.autoSetupRemote' in 'git help config'. What does upstream mean? OK, maybe I need to push specific files and folders inside the Mkdocs directory. PS C:\\code\\Mkdocs> git remote add mkdocs.yml https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git remote add site https://github.com/svavarkonn/MkDocs PS C:\\code\\Mkdocs> git remote add docs https://github.com/svavarkonn/MkDocs Nothing. Nothing happened. PS C:\\code\\Mkdocs> git push MkDocs error: src refspec refs/heads/main does not match any error: failed to push some refs to 'MkDocs' So far, this is not fun.","title":"GitHub setup"},{"location":"setup.html#page-source","text":"The Markdown code for the View page Source button is like this: [View page source](setup.txt){ .md-button } I'm going to put it on every page of my documentation. If you see an interesting element in the page, you can then easily see how to set it up. Pointing to a .md file doesn't work, so my workaround is to make a copy of the Markdown source file and change its extension to .txt . I made a Python script using this tutorial and put it in the MkDocs folder. The script copies all the .md files in the docs folder to another folder called textfiles and converts their extension to .txt. To change the theme for just the home page, I followed tmeuze's advice in this issue . To mkdocs.yml I added custom_dir : docs/overrides and created a docs/overrides folder. Then I was unsure how to set up a custom theme, so I stopped there. To enable the Github Repository button in the top right corner, I followed this example and added the following to my mkdocs.yml , just below site_name : repo_name : Github Repository repo_url : https://github.com/svavarkonn/MkDocs I added theme : features : - navigation.tracking so that the URL in the address bar changes as you scroll down the page. If you copy the URL, the page will open in the section where you were when you copied it. Might be convenient if someone wants to cite something on this site. I also added theme : features : - navigation.tabs - navigation.tabs.sticky to make the top navigation follow you as you scroll down the page. By default, an \"Edit this page\" symbol is added to the right of the headline of every page. When you click it you just get a 404 error. I followed [this] to remove the edit button. I just add < style > . md-content__button { display : none ; } </ style > to the .md file of each page and voil\u00e1! The edit button disappears. View page source .md-content__button { display: none; }","title":"Page source"}]}